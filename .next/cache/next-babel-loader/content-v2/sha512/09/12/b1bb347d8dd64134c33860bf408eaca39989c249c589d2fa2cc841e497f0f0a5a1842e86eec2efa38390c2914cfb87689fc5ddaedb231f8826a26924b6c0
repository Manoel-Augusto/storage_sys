{"ast":null,"code":"const request = require('request');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst jwt = require('jsonwebtoken');\n\nconst createFolder = async (_id, path) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let {\n    dropboxToken\n  } = await db.findOne({\n    _id: new ObjectID(_id)\n  }, {\n    projection: {\n      _id: 0,\n      dropboxToken: 1\n    }\n  });\n  client.close();\n  return new Promise((s, r) => {\n    request.post({\n      url: \"https://api.dropboxapi.com/2/files/create_folder_v2\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${dropboxToken}`\n      },\n      json: {\n        path,\n        autorename: false\n      }\n    }, (err, res, body) => {\n      if (err) {\n        r(err);\n      } else {\n        s(body);\n      }\n    });\n  });\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    if (tk) {\n      switch (method) {\n        case 'POST':\n          try {\n            let {\n              id\n            } = jwt.verify(tk, process.env.JWTSECRET);\n            let {\n              folder\n            } = req.body;\n            res.status(200).json(await createFolder(id, folder));\n          } catch (e) {\n            res.status(200).json({\n              error: true,\n              msg: 'Falha na criação'\n            });\n          }\n\n          break;\n\n        default:\n          res.status(405).end(`Method ${method} Not Allowed`);\n      }\n    } else {\n      res.status(500).json({\n        statusCode: 500,\n        msg: \"Falha na autenticação\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/folder.js"],"names":["request","require","ObjectID","loginMongo","jwt","createFolder","_id","path","db","client","process","env","MONGODB","dropboxToken","findOne","projection","close","Promise","s","r","post","url","headers","json","autorename","err","res","body","handler","req","method","cookies","tk","id","verify","JWTSECRET","folder","status","e","error","msg","end","statusCode","message"],"mappings":"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","sourcesContent":["const request = require('request');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst jwt = require('jsonwebtoken');\n\nconst createFolder = async(_id, path)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n   let {dropboxToken} = await db.findOne({_id: new ObjectID(_id)},{ projection:{_id:0,dropboxToken:1}})\n   client.close()\n   return new Promise((s,r)=>{\n      request.post({\n         url: \"https://api.dropboxapi.com/2/files/create_folder_v2\",\n         headers:{\"Content-Type\":\"application/json\",\"Authorization\":`Bearer ${dropboxToken}`},\n         json:{ path, autorename: false }\n      }, (err, res, body)=>{\n         if(err){\n            r(err)\n         }else{\n            s(body)\n         }\n      })\n   })\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method, cookies:{tk} } = req;\n      if(tk){\n         switch(method){\n            case 'POST':\n               try{\n                  let { id } = jwt.verify(tk, process.env.JWTSECRET);\n                  let { folder } = req.body\n                  res.status(200).json(await createFolder(id, folder))\n               }catch(e){\n                  res.status(200).json({error: true, msg: 'Falha na criação'})\n               }\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      }else{\n         res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}