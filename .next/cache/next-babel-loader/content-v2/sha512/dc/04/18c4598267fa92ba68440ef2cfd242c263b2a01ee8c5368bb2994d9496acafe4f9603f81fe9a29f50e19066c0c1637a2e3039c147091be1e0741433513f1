{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/opt/js/storage_sys/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/js/storage_sys/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/opt/js/storage_sys/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/opt/js/storage_sys/contexts/models/data.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useCallback } from 'react';\nvar ContextData = /*#__PURE__*/React.createContext();\n\nfunction ProviderData(props) {\n  _s();\n\n  var _useState = useState([]),\n      listRecords = _useState[0],\n      setListRecords = _useState[1];\n\n  var _useState2 = useState(false),\n      checkAll = _useState2[0],\n      setCheckAll = _useState2[1];\n\n  var elCheckAll = useCallback(function (el) {\n    if (el) {\n      if (checkAll === null) {\n        el.indeterminate = true;\n      } else {\n        el.indeterminate = false;\n      }\n    }\n  }, [checkAll]);\n\n  var toggleCheck = function toggleCheck() {\n    var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    ids = ids.length ? ids : listRecords.filter(function (item) {\n      return checkAll === null ? Boolean(item.selected) : !checkAll != Boolean(item.selected);\n    }).map(function (item) {\n      return item.id;\n    });\n    var newListRecords = listRecords.map(function (item) {\n      return ids.includes(item.id) ? _objectSpread(_objectSpread({}, item), {}, {\n        selected: !item.selected\n      }) : item;\n    });\n    var selectedRecords = newListRecords.filter(function (item) {\n      return item.selected;\n    });\n    setCheckAll(selectedRecords.length < newListRecords.length ? selectedRecords.length ? null : false : !checkAll);\n    setListRecords(newListRecords);\n  };\n\n  var getData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var slug,\n          _yield$fetch$then,\n          entries,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              slug = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];\n              _context.next = 3;\n              return fetch(\"/api/get-list-folder/\".concat(slug.join('/'))).then(function (res) {\n                return res.json();\n              });\n\n            case 3:\n              _yield$fetch$then = _context.sent;\n              entries = _yield$fetch$then.entries;\n\n              if (entries) {\n                setListRecords(entries);\n                setCheckAll(false);\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(ContextData.Provider, {\n    value: {\n      listRecords: listRecords,\n      setListRecords: setListRecords,\n      checkAll: checkAll,\n      setCheckAll: setCheckAll,\n      elCheckAll: elCheckAll,\n      toggleCheck: toggleCheck,\n      getData: getData\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ProviderData, \"4W8zRZF9Y5s8iJ4In+dCeUoVYPo=\");\n\n_c = ProviderData;\nexport default ProviderData;\nexport { ContextData };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderData\");","map":{"version":3,"sources":["/opt/js/storage_sys/contexts/models/data.js"],"names":["React","useState","useEffect","useCallback","ContextData","createContext","ProviderData","props","listRecords","setListRecords","checkAll","setCheckAll","elCheckAll","el","indeterminate","toggleCheck","ids","length","filter","item","Boolean","selected","map","id","newListRecords","includes","selectedRecords","getData","slug","fetch","join","then","res","json","entries","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nconst ContextData = React.createContext()\n\nfunction ProviderData(props){\n   const [listRecords, setListRecords] = useState([])\n   const [checkAll, setCheckAll] = useState(false)\n\n   const elCheckAll = useCallback(el => {\n      if(el){\n         if(checkAll === null){\n            el.indeterminate = true\n         }else{\n            el.indeterminate = false\n         }\n      }\n   }, [checkAll]);\n\n   const toggleCheck = (ids=[])=>{\n      ids = ids.length ? ids :\n         listRecords\n         .filter(item => checkAll === null ? Boolean(item.selected) : !checkAll != Boolean(item.selected))\n         .map(item => item.id)\n      let newListRecords = listRecords.map(item => ids.includes(item.id) ? {...item,selected:!item.selected} : item)\n      let selectedRecords = newListRecords.filter(item => item.selected)\n      setCheckAll(selectedRecords.length < newListRecords.length ? selectedRecords.length ? null : false : !checkAll)\n      setListRecords(newListRecords)\n   }\n\n   const getData = async(slug=[])=>{\n      let { entries } = await fetch(`/api/get-list-folder/${slug.join('/')}`).then(res => res.json())\n      if(entries){\n         setListRecords(entries)\n         setCheckAll(false)\n      }\n   }\n\n   return(\n      <ContextData.Provider value={{\n         listRecords,\n         setListRecords,\n         checkAll,\n         setCheckAll,\n         elCheckAll,\n         toggleCheck,\n         getData,\n      }}>\n         {props.children}\n      </ContextData.Provider>\n   )\n}\nexport default ProviderData\nexport { ContextData }\n"]},"metadata":{},"sourceType":"module"}