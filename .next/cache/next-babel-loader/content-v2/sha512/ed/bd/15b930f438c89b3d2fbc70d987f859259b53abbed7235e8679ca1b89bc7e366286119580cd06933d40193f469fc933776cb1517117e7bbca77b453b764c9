{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/opt/js/storage_sys/contexts/models/auth.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect } from 'react';\nconst ContextAuth = /*#__PURE__*/React.createContext();\n\nfunction ProviderAuth(props) {\n  const {\n    0: session,\n    1: setSession\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    const handleAuthenticated = async () => {\n      let _await$await$fetch$js = await (await fetch('/api/check-auth')).json(),\n          {\n        error\n      } = _await$await$fetch$js,\n          rest = _objectWithoutProperties(_await$await$fetch$js, [\"error\"]);\n\n      if (!error) {\n        setSession(rest);\n      }\n\n      setLoading(false);\n    };\n\n    handleAuthenticated();\n  }, []);\n\n  const createSession = user => {\n    setSession(user);\n  };\n\n  const removeSession = async () => {\n    fetch('/api/logout');\n    setSession();\n  };\n\n  return /*#__PURE__*/_jsxDEV(ContextAuth.Provider, {\n    value: {\n      session,\n      loading,\n      setSession,\n      createSession,\n      removeSession\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n}\n\nexport default ProviderAuth;\nexport { ContextAuth };","map":{"version":3,"sources":["/opt/js/storage_sys/contexts/models/auth.js"],"names":["React","useState","useEffect","ContextAuth","createContext","ProviderAuth","props","session","setSession","loading","setLoading","handleAuthenticated","fetch","json","error","rest","createSession","user","removeSession","children"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,EAApB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AACzB,QAAM;AAAA,OAACC,OAAD;AAAA,OAASC;AAAT,MAAuBP,QAAQ,EAArC;AACA,QAAM;AAAA,OAACQ,OAAD;AAAA,OAASC;AAAT,MAAuBT,QAAQ,CAAC,IAAD,CAArC;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACX,UAAMS,mBAAmB,GAAG,YAAS;AAClC,kCAAwB,MAAM,CAAC,MAAMC,KAAK,CAAC,iBAAD,CAAZ,EAAiCC,IAAjC,EAA9B;AAAA,UAAI;AAAEC,QAAAA;AAAF,OAAJ;AAAA,UAAgBC,IAAhB;;AACA,UAAG,CAACD,KAAJ,EAAU;AACPN,QAAAA,UAAU,CAACO,IAAD,CAAV;AACF;;AACDL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACF,KAND;;AAOAC,IAAAA,mBAAmB;AACrB,GATQ,EASP,EATO,CAAT;;AAWA,QAAMK,aAAa,GAAIC,IAAD,IAAQ;AAC3BT,IAAAA,UAAU,CAACS,IAAD,CAAV;AACF,GAFD;;AAIA,QAAMC,aAAa,GAAG,YAAS;AAC5BN,IAAAA,KAAK,CAAC,aAAD,CAAL;AACAJ,IAAAA,UAAU;AACZ,GAHD;;AAKA,sBACG,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAC1BD,MAAAA,OAD0B;AAE1BE,MAAAA,OAF0B;AAG1BD,MAAAA,UAH0B;AAI1BQ,MAAAA,aAJ0B;AAK1BE,MAAAA;AAL0B,KAA7B;AAAA,cAOIZ,KAAK,CAACa;AAPV;AAAA;AAAA;AAAA;AAAA,UADH;AAWF;;AAED,eAAed,YAAf;AACA,SAASF,WAAT","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ContextAuth = React.createContext()\n\nfunction ProviderAuth(props){\n   const [session,setSession] = useState()\n   const [loading,setLoading] = useState(true)\n\n   useEffect(()=>{\n      const handleAuthenticated = async()=>{\n         let { error, ...rest} = await (await fetch('/api/check-auth')).json()\n         if(!error){\n            setSession(rest)\n         }\n         setLoading(false)\n      }\n      handleAuthenticated()\n   },[])\n\n   const createSession = (user)=>{\n      setSession(user)\n   }\n\n   const removeSession = async()=>{\n      fetch('/api/logout')\n      setSession()\n   }\n\n   return(\n      <ContextAuth.Provider value={{\n         session,\n         loading,\n         setSession,\n         createSession,\n         removeSession\n      }}>\n         {props.children}\n      </ContextAuth.Provider>\n   )\n}\n\nexport default ProviderAuth\nexport { ContextAuth }\n"]},"metadata":{},"sourceType":"module"}