{"ast":null,"code":"const {\n  loginMongo\n} = require('../../models/mongo');\n\nconst {\n  IncomingForm\n} = require('formidable');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst jwt = require('jsonwebtoken');\n\nconst request = require('request');\n\nconst fs = require('fs');\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst getFormData = req => new Promise((s, r) => {\n  const form = new IncomingForm();\n  form.parse(req, (err, fields, files) => {\n    if (err) return r(err);\n    s({\n      fields,\n      file: fs.readFileSync(files.file.path)\n    });\n  });\n});\n\nconst upload = async (_id, path, file) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let {\n    dropboxToken\n  } = await db.findOne({\n    _id: new ObjectID(_id)\n  }, {\n    projection: {\n      _id: 0,\n      dropboxToken: 1\n    }\n  });\n  client.close();\n  return new Promise((s, r) => {\n    const args = JSON.stringify({\n      path,\n      mode: \"add\",\n      autorename: true,\n      mute: false,\n      strict_conflict: false\n    });\n    console.log(args);\n    request.post({\n      url: \"https://content.dropboxapi.com/2/files/upload\",\n      headers: {\n        \"Content-Type\": \"application/octet-stream\",\n        \"Authorization\": `Bearer ${dropboxToken}`,\n        \"Dropbox-API-Arg\": args\n      },\n      body: file\n    }, (err, res, body) => {\n      if (err) return r(err);\n      s(body);\n    });\n  });\n};\n\nexport default async function handler(req, res) {\n  //try{\n  const {\n    method,\n    cookies: {\n      tk\n    }\n  } = req;\n\n  if (tk) {\n    switch (method) {\n      case 'POST':\n        //try{\n        let {\n          id\n        } = jwt.verify(tk, process.env.JWTSECRET);\n        let {\n          fields: {\n            path\n          },\n          file\n        } = await getFormData(req);\n        console.log(await upload(id, path, file));\n        res.status(200).json({\n          error: false\n        });\n        /*}catch(e){\n           res.status(200).json({error: true, msg: 'Falha na criação'})\n        }*/\n\n        break;\n\n      default:\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } else {\n    res.status(500).json({\n      statusCode: 500,\n      msg: \"Falha na autenticação\"\n    });\n  }\n  /*}catch(err){\n     res.status(500).json({statusCode: 500, msg: err.message})\n  }*/\n\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/upload.js"],"names":["loginMongo","require","IncomingForm","ObjectID","jwt","request","fs","config","api","bodyParser","getFormData","req","Promise","s","r","form","parse","err","fields","files","file","readFileSync","path","upload","_id","db","client","process","env","MONGODB","dropboxToken","findOne","projection","close","args","JSON","stringify","mode","autorename","mute","strict_conflict","console","log","post","url","headers","body","res","handler","method","cookies","tk","id","verify","JWTSECRET","status","json","error","end","statusCode","msg"],"mappings":"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","sourcesContent":["const { loginMongo } = require('../../models/mongo');\nconst { IncomingForm } = require('formidable');\nconst { ObjectID } = require('mongodb');\nconst jwt = require('jsonwebtoken');\nconst request = require('request');\nconst fs = require('fs');\nexport const config = {api: {bodyParser: false}}\n\nconst getFormData = (req) => new Promise((s,r)=>{\n   const form = new IncomingForm();\n   form.parse(req, (err, fields, files) => {\n      if (err) return r(err)\n      s({fields, file: fs.readFileSync(files.file.path)})\n   });\n});\n\nconst upload = async(_id, path, file)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n   let {dropboxToken} = await db.findOne({_id: new ObjectID(_id)},{ projection:{_id:0,dropboxToken:1}})\n   client.close()\n   return new Promise((s,r)=>{\n      const args = JSON.stringify({path, mode: \"add\",autorename: true,mute: false,strict_conflict: false}) \n      console.log(args)\n      request.post({\n         url: \"https://content.dropboxapi.com/2/files/upload\",\n         headers:{\n            \"Content-Type\": \"application/octet-stream\",\n            \"Authorization\":`Bearer ${dropboxToken}`,\n            \"Dropbox-API-Arg\": args,\n         },\n         body: file,\n      }, (err, res, body)=>{\n         if(err) return r(err)\n         s(body)\n      })\n   })\n}\n\nexport default async function handler(req, res){\n   //try{\n   const { method, cookies:{tk} } = req;\n   if(tk){\n      switch(method){\n         case 'POST':\n            //try{\n            let { id } = jwt.verify(tk, process.env.JWTSECRET);\n            let {fields:{path}, file} = await getFormData(req)\n            console.log(await upload(id, path, file))\n            res.status(200).json({error: false})\n            /*}catch(e){\n               res.status(200).json({error: true, msg: 'Falha na criação'})\n            }*/\n            break;\n         default:\n            res.status(405).end(`Method ${method} Not Allowed`)\n      }\n   }else{\n      res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n   }\n   /*}catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }*/\n}\n"]},"metadata":{},"sourceType":"module"}