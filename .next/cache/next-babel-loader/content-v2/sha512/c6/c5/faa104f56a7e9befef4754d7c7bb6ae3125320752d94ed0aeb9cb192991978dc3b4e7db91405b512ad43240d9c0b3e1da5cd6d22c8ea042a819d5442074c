{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst request = require('request');\n\nconst bcrypt = require('bcrypt');\n\nconst jwt = require('jsonwebtoken');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst saltRounds = 54321;\n\nconst shareLink = async (user_id, id, name, type, active) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'share');\n\n  if (active) {\n    let link = bcrypt.genSaltSync(saltRounds);\n    await db.insert({\n      file_id: id,\n      user_id,\n      name,\n      type,\n      link\n    });\n    return {\n      error: false,\n      link\n    };\n  }\n\n  await db.remove({\n    file_id: id\n  });\n  client.close();\n  return {\n    error: false,\n    link: ''\n  };\n};\n\nconst getLink = async link => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'share');\n  let rt = await db.findOne({\n    link\n  }, {\n    projection: {\n      _id: 0,\n      name: 1,\n      type: 1,\n      file_id: 1,\n      user_id: 1\n    }\n  });\n  console.log(rt);\n  client.close();\n  return _objectSpread({\n    error: false\n  }, rt);\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    switch (method) {\n      case 'POST':\n        if (tk) {\n          try {\n            let {\n              id: user_id\n            } = jwt.verify(tk, process.env.JWTSECRET);\n            let {\n              id,\n              name,\n              type,\n              active\n            } = req.body;\n            res.status(200).json(await shareLink(user_id, id, name, type, active));\n          } catch (e) {\n            res.status(200).json({\n              error: true,\n              msg: 'Falha na criação'\n            });\n          }\n        } else {\n          res.status(500).json({\n            statusCode: 500,\n            error: true,\n            msg: \"Falha na autenticação\"\n          });\n        }\n\n        break;\n\n      case 'GET':\n        let {\n          link\n        } = req.query;\n        res.status(200).json(await getLink(link));\n        break;\n\n      default:\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/share-link.js"],"names":["request","require","bcrypt","jwt","ObjectID","loginMongo","saltRounds","shareLink","user_id","id","name","type","active","db","client","process","env","MONGODB","link","genSaltSync","insert","file_id","error","remove","close","getLink","rt","findOne","projection","_id","console","log","handler","req","res","method","cookies","tk","verify","JWTSECRET","body","status","json","e","msg","statusCode","query","end","err","message"],"mappings":"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","sourcesContent":["const request = require('request');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst saltRounds = 54321;\n\nconst shareLink = async(user_id, id, name, type, active)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'share')\n   if(active){\n      let link = bcrypt.genSaltSync(saltRounds);\n      await db.insert({file_id: id, user_id, name, type, link})\n      return {error: false, link}\n   }\n   await db.remove({file_id: id})\n   client.close()\n   return {error: false, link: ''}\n}\n\nconst getLink = async(link) => {\n   let {db, client} = await loginMongo(process.env.MONGODB, 'share')\n   let rt = await db.findOne({link}, {projection:{_id:0,name:1,type:1,file_id:1,user_id:1}})\n   console.log(rt)\n   client.close()\n   return {error: false, ...rt}\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method, cookies:{tk} } = req;\n      switch(method){\n         case 'POST':\n            if(tk){\n               try{\n                  let { id:user_id } = jwt.verify(tk, process.env.JWTSECRET);\n                  let { id, name, type, active } = req.body\n                  res.status(200).json(await shareLink(user_id, id, name, type, active))\n               }catch(e){\n                  res.status(200).json({error: true, msg: 'Falha na criação'})\n               }\n            }else{\n               res.status(500).json({statusCode: 500, error: true, msg: \"Falha na autenticação\"})\n            }\n            break;\n         case 'GET':\n            let { link } = req.query\n            res.status(200).json(await getLink(link))\n            break;\n         default:\n            res.status(405).end(`Method ${method} Not Allowed`)\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}