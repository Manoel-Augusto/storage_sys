{"ast":null,"code":"const {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst jwt = require('jsonwebtoken');\n\nconst bcrypt = require('bcrypt');\n\nconst updateUser = async (_id, data = {}) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  console.log(_id, data);\n  let rt = await db.update({\n    _id: new ObjectID(_id)\n  }, {\n    $set: data\n  });\n  console.log(rt);\n  client.close();\n  return rt ? true : false;\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    if (tk) {\n      switch (method) {\n        case 'PUT':\n          try {\n            let {\n              id\n            } = jwt.verify(tk, process.env.JWTSECRET);\n\n            if (req.body.password) {\n              const hash = bcrypt.hashSync(req.body.password, 10);\n              req.body.password = hash;\n            }\n\n            res.status(200).json(await updateUser(id, req.body));\n          } catch (e) {\n            res.status(200).json(false);\n          }\n\n          break;\n\n        default:\n          res.status(405).end(`Method ${method} Not Allowed`);\n      }\n    } else {\n      res.status(500).json({\n        statusCode: 500,\n        msg: \"Falha na autenticação\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/user.js"],"names":["ObjectID","require","loginMongo","jwt","bcrypt","updateUser","_id","data","db","client","process","env","MONGODB","console","log","rt","update","$set","close","handler","req","res","method","cookies","tk","id","verify","JWTSECRET","body","password","hash","hashSync","status","json","e","end","statusCode","msg","err","message"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAiBD,OAAO,CAAC,oBAAD,CAA9B;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMI,UAAU,GAAG,OAAMC,GAAN,EAAWC,IAAI,GAAC,EAAhB,KAAqB;AACrC,MAAI;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,MAAe,MAAMP,UAAU,CAACQ,OAAO,CAACC,GAAR,CAAYC,OAAb,EAAsB,OAAtB,CAAnC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ,EAAiBC,IAAjB;AACA,MAAIQ,EAAE,GAAG,MAAMP,EAAE,CAACQ,MAAH,CAAU;AAACV,IAAAA,GAAG,EAAE,IAAIN,QAAJ,CAAaM,GAAb;AAAN,GAAV,EAAmC;AAACW,IAAAA,IAAI,EAAEV;AAAP,GAAnC,CAAf;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYC,EAAZ;AACAN,EAAAA,MAAM,CAACS,KAAP;AACA,SAAOH,EAAE,GAAG,IAAH,GAAU,KAAnB;AACF,CAPD;;AASA,eAAe,eAAeI,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAgC;AAC5C,MAAG;AACA,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,OAAO,EAAC;AAACC,QAAAA;AAAD;AAAlB,QAA2BJ,GAAjC;;AACA,QAAGI,EAAH,EAAM;AACH,cAAOF,MAAP;AACG,aAAK,KAAL;AACG,cAAG;AACA,gBAAI;AAAEG,cAAAA;AAAF,gBAAStB,GAAG,CAACuB,MAAJ,CAAWF,EAAX,EAAed,OAAO,CAACC,GAAR,CAAYgB,SAA3B,CAAb;;AACA,gBAAGP,GAAG,CAACQ,IAAJ,CAASC,QAAZ,EAAqB;AAClB,oBAAMC,IAAI,GAAG1B,MAAM,CAAC2B,QAAP,CAAgBX,GAAG,CAACQ,IAAJ,CAASC,QAAzB,EAAmC,EAAnC,CAAb;AACAT,cAAAA,GAAG,CAACQ,IAAJ,CAASC,QAAT,GAAoBC,IAApB;AACF;;AACDT,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,MAAM5B,UAAU,CAACoB,EAAD,EAAKL,GAAG,CAACQ,IAAT,CAArC;AACF,WAPD,CAOC,OAAMM,CAAN,EAAQ;AACNb,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,KAArB;AACF;;AACD;;AACH;AACGZ,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBG,GAAhB,CAAqB,UAASb,MAAO,cAArC;AAdN;AAgBF,KAjBD,MAiBK;AACFD,MAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACG,QAAAA,UAAU,EAAE,GAAb;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAArB;AACF;AACH,GAtBD,CAsBC,OAAMC,GAAN,EAAU;AACRjB,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACG,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAEC,GAAG,CAACC;AAA3B,KAArB;AACF;AACH","sourcesContent":["const { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcrypt');\n\nconst updateUser = async(_id, data={})=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n   console.log(_id, data)\n   let rt = await db.update({_id: new ObjectID(_id)},{$set: data})\n   console.log(rt)\n   client.close()\n   return rt ? true : false\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method, cookies:{tk} } = req;\n      if(tk){\n         switch(method){\n            case 'PUT':\n               try{\n                  let { id } = jwt.verify(tk, process.env.JWTSECRET);\n                  if(req.body.password){\n                     const hash = bcrypt.hashSync(req.body.password, 10);\n                     req.body.password = hash\n                  }\n                  res.status(200).json(await updateUser(id, req.body))\n               }catch(e){\n                  res.status(200).json(false)\n               }\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      }else{\n         res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}