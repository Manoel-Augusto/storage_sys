{"ast":null,"code":"const request = require('request');\n\nconst jwt = require('jsonwebtoken');\n\nconst fs = require('fs');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst {\n  IncomingForm\n} = require('formidable');\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst getFormData = req => new Promise((s, r) => {\n  const form = new IncomingForm();\n  form.parse(req, (err, fields, files) => {\n    if (err) return r(err);\n    s({\n      fields,\n      file: fs.readFileSync(files.file.path)\n    });\n  });\n});\n\nexport default async function handler(req, res) {\n  //try{\n  const {\n    method,\n    cookies: {\n      tk\n    }\n  } = req;\n\n  if (tk) {\n    switch (method) {\n      case 'POST':\n        //try{\n        let {\n          id\n        } = jwt.verify(tk, process.env.JWTSECRET);\n        let {\n          fields: {\n            path\n          },\n          file\n        } = await getFormData(req);\n        console.log(path, file);\n        res.status(200).json({\n          error: false\n        });\n        /*}catch(e){\n           res.status(200).json({error: true, msg: 'Falha na criação'})\n        }*/\n\n        break;\n\n      default:\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } else {\n    res.status(500).json({\n      statusCode: 500,\n      msg: \"Falha na autenticação\"\n    });\n  }\n  /*}catch(err){\n     res.status(500).json({statusCode: 500, msg: err.message})\n  }*/\n\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/upload.js"],"names":["request","require","jwt","fs","ObjectID","loginMongo","IncomingForm","config","api","bodyParser","getFormData","req","Promise","s","r","form","parse","err","fields","files","file","readFileSync","path","handler","res","method","cookies","tk","id","verify","process","env","JWTSECRET","console","log","status","json","error","end","statusCode","msg"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAeH,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAiBJ,OAAO,CAAC,oBAAD,CAA9B;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAmBL,OAAO,CAAC,YAAD,CAAhC;;AACA,OAAO,MAAMM,MAAM,GAAG;AAACC,EAAAA,GAAG,EAAE;AAACC,IAAAA,UAAU,EAAE;AAAb;AAAN,CAAf;;AAEP,MAAMC,WAAW,GAAIC,GAAD,IAAS,IAAIC,OAAJ,CAAY,CAACC,CAAD,EAAGC,CAAH,KAAO;AAC7C,QAAMC,IAAI,GAAG,IAAIT,YAAJ,EAAb;AACAS,EAAAA,IAAI,CAACC,KAAL,CAAWL,GAAX,EAAgB,CAACM,GAAD,EAAMC,MAAN,EAAcC,KAAd,KAAwB;AACrC,QAAIF,GAAJ,EAAS,OAAOH,CAAC,CAACG,GAAD,CAAR;AACTJ,IAAAA,CAAC,CAAC;AAACK,MAAAA,MAAD;AAASE,MAAAA,IAAI,EAAEjB,EAAE,CAACkB,YAAH,CAAgBF,KAAK,CAACC,IAAN,CAAWE,IAA3B;AAAf,KAAD,CAAD;AACF,GAHD;AAIF,CAN4B,CAA7B;;AAQA,eAAe,eAAeC,OAAf,CAAuBZ,GAAvB,EAA4Ba,GAA5B,EAAgC;AAC5C;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAO,EAAC;AAACC,MAAAA;AAAD;AAAlB,MAA2BhB,GAAjC;;AACA,MAAGgB,EAAH,EAAM;AACH,YAAOF,MAAP;AACG,WAAK,MAAL;AACG;AACA,YAAI;AAAEG,UAAAA;AAAF,YAAS1B,GAAG,CAAC2B,MAAJ,CAAWF,EAAX,EAAeG,OAAO,CAACC,GAAR,CAAYC,SAA3B,CAAb;AACA,YAAI;AAACd,UAAAA,MAAM,EAAC;AAACI,YAAAA;AAAD,WAAR;AAAgBF,UAAAA;AAAhB,YAAwB,MAAMV,WAAW,CAACC,GAAD,CAA7C;AACAsB,QAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ,EAAkBF,IAAlB;AAEAI,QAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,KAAK,EAAE;AAAR,SAArB;AACA;AACZ;AACA;;AACY;;AACH;AACGb,QAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBG,GAAhB,CAAqB,UAASb,MAAO,cAArC;AAbN;AAeF,GAhBD,MAgBK;AACFD,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACG,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAE;AAAvB,KAArB;AACF;AACD;AACH;AACA;;AACC","sourcesContent":["const request = require('request');\nconst jwt = require('jsonwebtoken');\nconst fs = require('fs');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst { IncomingForm } = require('formidable');\nexport const config = {api: {bodyParser: false}}\n\nconst getFormData = (req) => new Promise((s,r)=>{\n   const form = new IncomingForm();\n   form.parse(req, (err, fields, files) => {\n      if (err) return r(err)\n      s({fields, file: fs.readFileSync(files.file.path)})\n   });\n});\n\nexport default async function handler(req, res){\n   //try{\n   const { method, cookies:{tk} } = req;\n   if(tk){\n      switch(method){\n         case 'POST':\n            //try{\n            let { id } = jwt.verify(tk, process.env.JWTSECRET);\n            let {fields:{path}, file} = await getFormData(req)\n            console.log(path, file)\n\n            res.status(200).json({error: false})\n            /*}catch(e){\n               res.status(200).json({error: true, msg: 'Falha na criação'})\n            }*/\n            break;\n         default:\n            res.status(405).end(`Method ${method} Not Allowed`)\n      }\n   }else{\n      res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n   }\n   /*}catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }*/\n}\n"]},"metadata":{},"sourceType":"module"}