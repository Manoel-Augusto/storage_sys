{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/opt/js/storage_sys/contexts/models/auth.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nconst ContextAuth = /*#__PURE__*/React.createContext();\n\nfunction ProviderAuth(props) {\n  const router = useRouter();\n  const {\n    0: session,\n    1: setSession\n  } = useState(null);\n  const {\n    0: authenticated,\n    1: setAuthenticated\n  } = useState(false);\n  const handleSession = useCallback(async e => {\n    let ss = JSON.parse(localStorage.getItem(\"ss\"));\n\n    if (ss) {\n      let authenticated = await (await fetch(`/api/check-auth?token=${ss.token}`)).json();\n      setSession(ss);\n      setAuthenticated(authenticated);\n    }\n  }, []);\n  useEffect(async () => {\n    handleSession();\n  }, [handleSession]);\n\n  const createSession = user => {\n    localStorage.setItem(\"ss\", JSON.stringify(user));\n    setSession(user);\n    setAuthenticated(true);\n  };\n\n  const removeSession = () => {\n    localStorage.removeItem(\"ss\");\n    setSession(null);\n    setAuthenticated(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ContextAuth.Provider, {\n    value: {\n      session,\n      setSession,\n      authenticated,\n      createSession,\n      removeSession\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 7\n  }, this);\n}\n\nexport default ProviderAuth;\nexport { ContextAuth };","map":{"version":3,"sources":["/opt/js/storage_sys/contexts/models/auth.js"],"names":["React","useState","useEffect","useCallback","useRouter","ContextAuth","createContext","ProviderAuth","props","router","session","setSession","authenticated","setAuthenticated","handleSession","e","ss","JSON","parse","localStorage","getItem","fetch","token","json","createSession","user","setItem","stringify","removeSession","removeItem","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,EAApB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AACzB,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAASC;AAAT,MAAuBV,QAAQ,CAAC,IAAD,CAArC;AACA,QAAM;AAAA,OAACW,aAAD;AAAA,OAAeC;AAAf,MAAmCZ,QAAQ,CAAC,KAAD,CAAjD;AAEA,QAAMa,aAAa,GAAGX,WAAW,CAAC,MAAMY,CAAN,IAAY;AAC3C,QAAIC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,IAArB,CAAX,CAAT;;AACA,QAAGJ,EAAH,EAAM;AACH,UAAIJ,aAAa,GAAG,MAAM,CAAC,MAAMS,KAAK,CAAE,yBAAwBL,EAAE,CAACM,KAAM,EAAnC,CAAZ,EAAmDC,IAAnD,EAA1B;AACAZ,MAAAA,UAAU,CAACK,EAAD,CAAV;AACAH,MAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACF;AACH,GAPgC,EAO9B,EAP8B,CAAjC;AASAV,EAAAA,SAAS,CAAC,YAAS;AAChBY,IAAAA,aAAa;AACf,GAFQ,EAEP,CAACA,aAAD,CAFO,CAAT;;AAIA,QAAMU,aAAa,GAAIC,IAAD,IAAQ;AAC3BN,IAAAA,YAAY,CAACO,OAAb,CAAqB,IAArB,EAA2BT,IAAI,CAACU,SAAL,CAAeF,IAAf,CAA3B;AACAd,IAAAA,UAAU,CAACc,IAAD,CAAV;AACAZ,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACF,GAJD;;AAMA,QAAMe,aAAa,GAAG,MAAI;AACvBT,IAAAA,YAAY,CAACU,UAAb,CAAwB,IAAxB;AACAlB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACF,GAJD;;AAMA,sBACG,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAC1BH,MAAAA,OAD0B;AAE1BC,MAAAA,UAF0B;AAG1BC,MAAAA,aAH0B;AAI1BY,MAAAA,aAJ0B;AAK1BI,MAAAA;AAL0B,KAA7B;AAAA,cAOIpB,KAAK,CAACsB;AAPV;AAAA;AAAA;AAAA;AAAA,UADH;AAWF;;AAED,eAAevB,YAAf;AACA,SAASF,WAAT","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useRouter } from 'next/router'\n\nconst ContextAuth = React.createContext()\n\nfunction ProviderAuth(props){\n   const router = useRouter()\n   const [session,setSession] = useState(null)\n   const [authenticated,setAuthenticated] = useState(false)\n\n   const handleSession = useCallback(async(e) => {\n      let ss = JSON.parse(localStorage.getItem(\"ss\"))\n      if(ss){\n         let authenticated = await (await fetch(`/api/check-auth?token=${ss.token}`)).json()\n         setSession(ss)\n         setAuthenticated(authenticated)\n      }\n   }, []);\n\n   useEffect(async()=>{\n      handleSession()\n   },[handleSession])\n\n   const createSession = (user)=>{\n      localStorage.setItem(\"ss\", JSON.stringify(user))\n      setSession(user)\n      setAuthenticated(true)\n   }\n\n   const removeSession = ()=>{\n      localStorage.removeItem(\"ss\")\n      setSession(null)\n      setAuthenticated(false)\n   }\n\n   return(\n      <ContextAuth.Provider value={{\n         session,\n         setSession,\n         authenticated,\n         createSession,\n         removeSession\n      }}>\n         {props.children}\n      </ContextAuth.Provider>\n   )\n}\n\nexport default ProviderAuth\nexport { ContextAuth }\n"]},"metadata":{},"sourceType":"module"}