{"ast":null,"code":"const request = require('request');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst jwt = require('jsonwebtoken');\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    if (tk) {\n      switch (method) {\n        case 'POST':\n          try {\n            let {\n              id\n            } = jwt.verify(tk, process.env.JWTSECRET);\n            var chunks = [];\n            req.on('data', function (chunk) {\n              // reads chunks of data in Buffer\n              chunks.push(chunk);\n              console.log(chunk);\n            });\n            console.log(\"++++++++====\", chunks);\n            res.status(200).json({\n              error: false\n            });\n          } catch (e) {\n            res.status(200).json({\n              error: true,\n              msg: 'Falha na criação'\n            });\n          }\n\n          break;\n\n        default:\n          res.status(405).end(`Method ${method} Not Allowed`);\n      }\n    } else {\n      res.status(500).json({\n        statusCode: 500,\n        msg: \"Falha na autenticação\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/upload.js"],"names":["request","require","ObjectID","loginMongo","jwt","handler","req","res","method","cookies","tk","id","verify","process","env","JWTSECRET","chunks","on","chunk","push","console","log","status","json","error","e","msg","end","statusCode","err","message"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAiBF,OAAO,CAAC,oBAAD,CAA9B;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,cAAD,CAAnB;;AAEA,eAAe,eAAeI,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAgC;AAC5C,MAAG;AACA,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,OAAO,EAAC;AAACC,QAAAA;AAAD;AAAlB,QAA2BJ,GAAjC;;AACA,QAAGI,EAAH,EAAM;AACH,cAAOF,MAAP;AACG,aAAK,MAAL;AACG,cAAG;AACA,gBAAI;AAAEG,cAAAA;AAAF,gBAASP,GAAG,CAACQ,MAAJ,CAAWF,EAAX,EAAeG,OAAO,CAACC,GAAR,CAAYC,SAA3B,CAAb;AACA,gBAAIC,MAAM,GAAG,EAAb;AACAV,YAAAA,GAAG,CAACW,EAAJ,CAAO,MAAP,EAAe,UAAUC,KAAV,EAAiB;AAC7B;AACAF,cAAAA,MAAM,CAACG,IAAP,CAAYD,KAAZ;AACAE,cAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACF,aAJD;AAKAE,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,MAA5B;AACAT,YAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,cAAAA,KAAK,EAAE;AAAR,aAArB;AACF,WAVD,CAUC,OAAMC,CAAN,EAAQ;AACNlB,YAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,cAAAA,KAAK,EAAE,IAAR;AAAcE,cAAAA,GAAG,EAAE;AAAnB,aAArB;AACF;;AACD;;AACH;AACGnB,UAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBK,GAAhB,CAAqB,UAASnB,MAAO,cAArC;AAjBN;AAmBF,KApBD,MAoBK;AACFD,MAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACK,QAAAA,UAAU,EAAE,GAAb;AAAkBF,QAAAA,GAAG,EAAE;AAAvB,OAArB;AACF;AACH,GAzBD,CAyBC,OAAMG,GAAN,EAAU;AACRtB,IAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACK,MAAAA,UAAU,EAAE,GAAb;AAAkBF,MAAAA,GAAG,EAAEG,GAAG,CAACC;AAA3B,KAArB;AACF;AACH","sourcesContent":["const request = require('request');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst jwt = require('jsonwebtoken');\n\nexport default async function handler(req, res){\n   try{\n      const { method, cookies:{tk} } = req;\n      if(tk){\n         switch(method){\n            case 'POST':\n               try{\n                  let { id } = jwt.verify(tk, process.env.JWTSECRET);\n                  var chunks = []\n                  req.on('data', function (chunk) {\n                     // reads chunks of data in Buffer\n                     chunks.push(chunk)\n                     console.log(chunk)\n                  })\n                  console.log(\"++++++++====\", chunks)\n                  res.status(200).json({error: false})\n               }catch(e){\n                  res.status(200).json({error: true, msg: 'Falha na criação'})\n               }\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      }else{\n         res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}