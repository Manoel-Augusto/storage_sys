{"ast":null,"code":"const jwt = require('jsonwebtoken');\n\nconst checkAuth = async token => {\n  try {\n    jwt.verify(token, process.env.JWTSECRET);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method\n    } = req;\n\n    if (method === 'GET') {\n      let {\n        token\n      } = req.query;\n      res.status(200).json(await checkAuth(token));\n    } else {\n      res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/check-auth.js"],"names":["jwt","require","checkAuth","token","verify","process","env","JWTSECRET","e","handler","req","res","method","query","status","json","end","err","statusCode","msg","message"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAEA,MAAMC,SAAS,GAAG,MAAMC,KAAN,IAAc;AAC7B,MAAG;AACAH,IAAAA,GAAG,CAACI,MAAJ,CAAWD,KAAX,EAAkBE,OAAO,CAACC,GAAR,CAAYC,SAA9B;AACA,WAAO,IAAP;AACF,GAHD,CAGC,OAAMC,CAAN,EAAQ;AACN,WAAO,KAAP;AACF;AACH,CAPD;;AASA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAgC;AAC5C,MAAG;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaF,GAAnB;;AACA,QAAGE,MAAM,KAAK,KAAd,EAAoB;AACjB,UAAI;AAAET,QAAAA;AAAF,UAAYO,GAAG,CAACG,KAApB;AACAF,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,MAAMb,SAAS,CAACC,KAAD,CAApC;AACF,KAHD,MAGK;AACFQ,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBE,GAAhB,CAAqB,UAASJ,MAAO,cAArC;AACF;AACH,GARD,CAQC,OAAMK,GAAN,EAAU;AACRN,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACG,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAEF,GAAG,CAACG;AAA3B,KAArB;AACF;AACH","sourcesContent":["const jwt = require('jsonwebtoken');\n\nconst checkAuth = async(token)=>{\n   try{\n      jwt.verify(token, process.env.JWTSECRET);\n      return true\n   }catch(e){\n      return false\n   }\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method } = req;\n      if(method === 'GET'){\n         let { token } = req.query\n         res.status(200).json(await checkAuth(token))\n      }else{\n         res.status(405).end(`Method ${method} Not Allowed`)\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}