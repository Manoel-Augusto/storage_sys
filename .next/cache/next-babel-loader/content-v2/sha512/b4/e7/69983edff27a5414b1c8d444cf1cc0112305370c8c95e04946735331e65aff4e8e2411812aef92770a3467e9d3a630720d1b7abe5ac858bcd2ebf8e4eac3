{"ast":null,"code":"const request = require('request');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst jwt = require('jsonwebtoken');\n\nconst getSharedFolderId = (token, path) => {\n  return new Promise((s, r) => {\n    request.post({\n      url: 'https://api.dropboxapi.com/2/sharing/share_folder',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      },\n      json: {\n        path,\n        acl_update_policy: \"editors\",\n        access_inheritance: \"inherit\"\n      }\n    }, (err, res, body) => {\n      if (err) return r(err);\n      s(body);\n    });\n  });\n};\n\nconst addCollaborator = async (user_id, id, path, email, type) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let {\n    dropboxToken\n  } = await db.findOne({\n    _id: new ObjectID(user_id)\n  }, {\n    projection: {\n      _id: 0,\n      dropboxToken: 1\n    }\n  });\n  client.close();\n\n  if (type == \"folder\") {\n    let {\n      shared_folder_id\n    } = await getSharedFolderId(dropboxToken, path);\n    var params = {\n      shared_folder_id,\n      members: [{\n        member: {\n          \".tag\": \"email\",\n          email\n        },\n        access_level: \"editor\"\n      }]\n    };\n  } else {\n    var params = {\n      file: id,\n      members: [{\n        \".tag\": \"email\",\n        email\n      }],\n      access_level: \"editor\"\n    };\n  }\n\n  return new Promise((s, r) => {\n    request.post({\n      url: `https://api.dropboxapi.com/2/sharing/add_${type}_member`,\n      headers: {\n        \"Authorization\": `Bearer ${dropboxToken}`\n      },\n      json: params\n    }, (err, res, body) => {\n      if (err) return r(err);\n      s(body);\n    });\n  });\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    if (tk) {\n      switch (method) {\n        case 'POST':\n          try {\n            let {\n              id: user_id\n            } = jwt.verify(tk, process.env.JWTSECRET);\n            let {\n              id,\n              path,\n              email,\n              type\n            } = req.body;\n            console.log(req.body);\n            let result = await addCollaborator(user_id, id, path, email, type);\n            console.log(result);\n            res.status(200).json({});\n          } catch (e) {\n            res.status(200).json({\n              error: true,\n              msg: 'Falha ao adicionar membro'\n            });\n          }\n\n          break;\n\n        default:\n          res.status(405).end(`Method ${method} Not Allowed`);\n      }\n    } else {\n      res.status(500).json({\n        statusCode: 500,\n        msg: \"Falha na autenticação\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/add-member.js"],"names":["request","require","ObjectID","loginMongo","jwt","getSharedFolderId","token","path","Promise","s","r","post","url","headers","json","acl_update_policy","access_inheritance","err","res","body","addCollaborator","user_id","id","email","type","db","client","process","env","MONGODB","dropboxToken","findOne","_id","projection","close","shared_folder_id","params","members","member","access_level","file","handler","req","method","cookies","tk","verify","JWTSECRET","console","log","result","status","e","error","msg","end","statusCode","message"],"mappings":"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","sourcesContent":["const request = require('request');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst jwt = require('jsonwebtoken');\n\nconst getSharedFolderId = (token, path) => {\n   return new Promise((s, r) => {\n      request.post({\n         url: 'https://api.dropboxapi.com/2/sharing/share_folder',\n         headers: {\n            \"Authorization\": `Bearer ${token}`,\n         },\n         json: {path, acl_update_policy: \"editors\", access_inheritance: \"inherit\"}\n      }, (err, res, body) => {\n         if (err)\n            return r(err)\n         s(body)\n      })\n   })\n\n}\n\nconst addCollaborator = async (user_id, id, path, email, type) => {\n   let { db, client } = await loginMongo(process.env.MONGODB, 'users')\n   let { dropboxToken } = await db.findOne({ _id: new ObjectID(user_id) }, { projection: { _id: 0, dropboxToken: 1 } })\n   client.close()\n   if (type == \"folder\") {\n      let { shared_folder_id } = await getSharedFolderId(dropboxToken, path)\n      var params = {\n         shared_folder_id,\n         members: [{\n            member: {\n               \".tag\": \"email\",\n               email\n            },\n            access_level: \"editor\"\n         }],\n      }\n   } else {\n      var params = {\n         file: id,\n         members: [{\n            \".tag\": \"email\",\n            email\n         }],\n         access_level: \"editor\",\n      }\n   }\n   return new Promise((s, r) => {\n      request.post({\n         url: `https://api.dropboxapi.com/2/sharing/add_${type}_member`,\n         headers: {\n            \"Authorization\": `Bearer ${dropboxToken}`,\n         },\n         json: params\n      }, (err, res, body) => {\n         if (err) return r(err)\n         s(body)\n      })\n   })\n}\n\nexport default async function handler(req, res) {\n   try {\n      const { method, cookies: { tk } } = req;\n      if (tk) {\n         switch (method) {\n            case 'POST':\n               try {\n                  let { id: user_id } = jwt.verify(tk, process.env.JWTSECRET);\n                  let { id, path, email, type } = req.body\n                  console.log(req.body)\n                  let result = await addCollaborator(user_id, id, path, email, type)\n                  console.log(result)\n                  res.status(200).json({})\n               } catch (e) {\n                  res.status(200).json({ error: true, msg: 'Falha ao adicionar membro' })\n               }\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      } else {\n         res.status(500).json({ statusCode: 500, msg: \"Falha na autenticação\" })\n      }\n   } catch (err) {\n      res.status(500).json({ statusCode: 500, msg: err.message })\n   }\n}\n"]},"metadata":{},"sourceType":"module"}