{"ast":null,"code":"const request = require('request');\n\nconst bcrypt = require('bcrypt');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst saltRounds = 54321;\n\nconst shareLink = async (id, name, type, active) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'share');\n\n  if (active) {\n    let link = bcrypt.genSaltSync(saltRounds);\n    await db.insert({\n      file_id: id,\n      name,\n      type,\n      link\n    });\n    return {\n      error: false,\n      link\n    };\n  }\n\n  await db.remove({\n    file_id: id\n  });\n  client.close();\n  return {\n    error: false,\n    link: ''\n  };\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method\n    } = req;\n\n    switch (method) {\n      case 'POST':\n        try {\n          let {\n            id,\n            name,\n            type,\n            active\n          } = req.body;\n          res.status(200).json(await shareLink(id, name, type, active));\n        } catch (e) {\n          res.status(200).json({\n            error: true,\n            msg: 'Falha na criação'\n          });\n        }\n\n        break;\n\n      default:\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/share-link.js"],"names":["request","require","bcrypt","ObjectID","loginMongo","saltRounds","shareLink","id","name","type","active","db","client","process","env","MONGODB","link","genSaltSync","insert","file_id","error","remove","close","handler","req","res","method","body","status","json","e","msg","end","err","statusCode","message"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAeF,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAiBH,OAAO,CAAC,oBAAD,CAA9B;;AACA,MAAMI,UAAU,GAAG,KAAnB;;AAEA,MAAMC,SAAS,GAAG,OAAMC,EAAN,EAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,MAAtB,KAA+B;AAC9C,MAAI;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,MAAe,MAAMR,UAAU,CAACS,OAAO,CAACC,GAAR,CAAYC,OAAb,EAAsB,OAAtB,CAAnC;;AACA,MAAGL,MAAH,EAAU;AACP,QAAIM,IAAI,GAAGd,MAAM,CAACe,WAAP,CAAmBZ,UAAnB,CAAX;AACA,UAAMM,EAAE,CAACO,MAAH,CAAU;AAACC,MAAAA,OAAO,EAAEZ,EAAV;AAAcC,MAAAA,IAAd;AAAoBC,MAAAA,IAApB;AAA0BO,MAAAA;AAA1B,KAAV,CAAN;AACA,WAAO;AAACI,MAAAA,KAAK,EAAE,KAAR;AAAeJ,MAAAA;AAAf,KAAP;AACF;;AACD,QAAML,EAAE,CAACU,MAAH,CAAU;AAACF,IAAAA,OAAO,EAAEZ;AAAV,GAAV,CAAN;AACAK,EAAAA,MAAM,CAACU,KAAP;AACA,SAAO;AAACF,IAAAA,KAAK,EAAE,KAAR;AAAeJ,IAAAA,IAAI,EAAE;AAArB,GAAP;AACF,CAVD;;AAYA,eAAe,eAAeO,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAgC;AAC5C,MAAG;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaF,GAAnB;;AACA,YAAOE,MAAP;AACG,WAAK,MAAL;AACG,YAAG;AACA,cAAI;AAAEnB,YAAAA,EAAF;AAAMC,YAAAA,IAAN;AAAYC,YAAAA,IAAZ;AAAkBC,YAAAA;AAAlB,cAA6Bc,GAAG,CAACG,IAArC;AACAF,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,MAAMvB,SAAS,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAiBC,MAAjB,CAApC;AACF,SAHD,CAGC,OAAMoB,CAAN,EAAQ;AACNL,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACT,YAAAA,KAAK,EAAE,IAAR;AAAcW,YAAAA,GAAG,EAAE;AAAnB,WAArB;AACF;;AACD;;AACH;AACGN,QAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBI,GAAhB,CAAqB,UAASN,MAAO,cAArC;AAVN;AAYF,GAdD,CAcC,OAAMO,GAAN,EAAU;AACRR,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACK,MAAAA,UAAU,EAAE,GAAb;AAAkBH,MAAAA,GAAG,EAAEE,GAAG,CAACE;AAA3B,KAArB;AACF;AACH","sourcesContent":["const request = require('request');\nconst bcrypt = require('bcrypt');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst saltRounds = 54321;\n\nconst shareLink = async(id, name, type, active)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'share')\n   if(active){\n      let link = bcrypt.genSaltSync(saltRounds);\n      await db.insert({file_id: id, name, type, link})\n      return {error: false, link}\n   }\n   await db.remove({file_id: id})\n   client.close()\n   return {error: false, link: ''}\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method } = req;\n      switch(method){\n         case 'POST':\n            try{\n               let { id, name, type, active } = req.body\n               res.status(200).json(await shareLink(id, name, type, active))\n            }catch(e){\n               res.status(200).json({error: true, msg: 'Falha na criação'})\n            }\n            break;\n         default:\n            res.status(405).end(`Method ${method} Not Allowed`)\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}