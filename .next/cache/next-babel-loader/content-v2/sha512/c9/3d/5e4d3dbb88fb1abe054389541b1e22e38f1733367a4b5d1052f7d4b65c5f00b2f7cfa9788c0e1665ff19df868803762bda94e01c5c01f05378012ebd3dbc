{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst jwt = require('jsonwebtoken');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst checkAuth = async token => {\n  try {\n    let {\n      id\n    } = jwt.verify(token, process.env.JWTSECRET);\n    let {\n      db,\n      client\n    } = await loginMongo(process.env.MONGODB, 'users');\n    let rt = await db.findOne({\n      _id: new ObjectID(id)\n    }, {\n      projection: {\n        _id: 0,\n        password: 0\n      }\n    });\n\n    if (rt) {\n      return _objectSpread({}, rt);\n    }\n\n    return {\n      error: true,\n      msg: \"Usuário não existe em nossa base.\"\n    };\n  } catch (e) {\n    return {\n      error: true,\n      msg: e\n    };\n  }\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method\n    } = req;\n\n    if (method === 'GET') {\n      let {\n        tk\n      } = req.cookies;\n      res.status(200).json(await checkAuth(tk));\n    } else {\n      res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/check-auth.js"],"names":["jwt","require","ObjectID","loginMongo","checkAuth","token","id","verify","process","env","JWTSECRET","db","client","MONGODB","rt","findOne","_id","projection","password","error","msg","e","handler","req","res","method","tk","cookies","status","json","end","err","statusCode","message"],"mappings":";;;;;;AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAiBF,OAAO,CAAC,oBAAD,CAA9B;;AAEA,MAAMG,SAAS,GAAG,MAAMC,KAAN,IAAc;AAC7B,MAAG;AACA,QAAI;AAAEC,MAAAA;AAAF,QAASN,GAAG,CAACO,MAAJ,CAAWF,KAAX,EAAkBG,OAAO,CAACC,GAAR,CAAYC,SAA9B,CAAb;AACA,QAAI;AAACC,MAAAA,EAAD;AAAKC,MAAAA;AAAL,QAAe,MAAMT,UAAU,CAACK,OAAO,CAACC,GAAR,CAAYI,OAAb,EAAsB,OAAtB,CAAnC;AACA,QAAIC,EAAE,GAAG,MAAMH,EAAE,CAACI,OAAH,CAAW;AAACC,MAAAA,GAAG,EAAE,IAAId,QAAJ,CAAaI,EAAb;AAAN,KAAX,EAAmC;AAAEW,MAAAA,UAAU,EAAC;AAACD,QAAAA,GAAG,EAAC,CAAL;AAAOE,QAAAA,QAAQ,EAAC;AAAhB;AAAb,KAAnC,CAAf;;AACA,QAAGJ,EAAH,EAAM;AACH,+BAAWA,EAAX;AACF;;AACD,WAAO;AAAEK,MAAAA,KAAK,EAAC,IAAR;AAAcC,MAAAA,GAAG,EAAE;AAAnB,KAAP;AACF,GARD,CAQC,OAAMC,CAAN,EAAQ;AACN,WAAO;AAAEF,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,GAAG,EAAEC;AAApB,KAAP;AACF;AACH,CAZD;;AAcA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAgC;AAC5C,MAAG;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaF,GAAnB;;AACA,QAAGE,MAAM,KAAK,KAAd,EAAoB;AACjB,UAAI;AAAEC,QAAAA;AAAF,UAASH,GAAG,CAACI,OAAjB;AACAH,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,MAAMzB,SAAS,CAACsB,EAAD,CAApC;AACF,KAHD,MAGK;AACFF,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBE,GAAhB,CAAqB,UAASL,MAAO,cAArC;AACF;AACH,GARD,CAQC,OAAMM,GAAN,EAAU;AACRP,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACG,MAAAA,UAAU,EAAE,GAAb;AAAkBZ,MAAAA,GAAG,EAAEW,GAAG,CAACE;AAA3B,KAArB;AACF;AACH","sourcesContent":["const jwt = require('jsonwebtoken');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\n\nconst checkAuth = async(token)=>{\n   try{\n      let { id } = jwt.verify(token, process.env.JWTSECRET);\n      let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n      let rt = await db.findOne({_id: new ObjectID(id)},{ projection:{_id:0,password:0}})\n      if(rt){\n         return {...rt}\n      }\n      return { error:true, msg: \"Usuário não existe em nossa base.\" }\n   }catch(e){\n      return { error: true, msg: e }\n   }\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method } = req;\n      if(method === 'GET'){\n         let { tk } = req.cookies\n         res.status(200).json(await checkAuth(tk))\n      }else{\n         res.status(405).end(`Method ${method} Not Allowed`)\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}