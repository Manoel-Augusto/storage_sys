{"ast":null,"code":"const request = require('request');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst jwt = require('jsonwebtoken');\n\nconst shareLink = async (id, name, type) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'share');\n  let exist = await db.findOne({\n    file_id: new ObjectID(id)\n  }, {\n    projection: {\n      _id: 1\n    }\n  });\n  client.close();\n  console.log(exist);\n  /*return new Promise((s,r)=>{\n     request.post({\n        url: \"https://api.dropboxapi.com/2/files/create_folder_v2\",\n        headers:{\"Content-Type\":\"application/json\",\"Authorization\":`Bearer ${dropboxToken}`},\n        json:{ path, autorename: false }\n     }, (err, res, body)=>{\n        if(err){\n           r(err)\n        }else{\n           s(body)\n        }\n     })\n  })*/\n\n  return {};\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method\n    } = req;\n\n    switch (method) {\n      case 'POST':\n        try {\n          let {\n            id,\n            name,\n            type\n          } = req.body;\n          res.status(200).json(await shareLink(id, name, type));\n        } catch (e) {\n          res.status(200).json({\n            error: true,\n            msg: 'Falha na criação'\n          });\n        }\n\n        break;\n\n      default:\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/share-link.js"],"names":["request","require","ObjectID","loginMongo","jwt","shareLink","id","name","type","db","client","process","env","MONGODB","exist","findOne","file_id","projection","_id","close","console","log","handler","req","res","method","body","status","json","e","error","msg","end","err","statusCode","message"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAiBF,OAAO,CAAC,oBAAD,CAA9B;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,cAAD,CAAnB;;AAEA,MAAMI,SAAS,GAAG,OAAMC,EAAN,EAAUC,IAAV,EAAgBC,IAAhB,KAAuB;AACtC,MAAI;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,MAAe,MAAMP,UAAU,CAACQ,OAAO,CAACC,GAAR,CAAYC,OAAb,EAAsB,OAAtB,CAAnC;AACA,MAAIC,KAAK,GAAG,MAAML,EAAE,CAACM,OAAH,CAAW;AAACC,IAAAA,OAAO,EAAE,IAAId,QAAJ,CAAaI,EAAb;AAAV,GAAX,EAAuC;AAAEW,IAAAA,UAAU,EAAC;AAACC,MAAAA,GAAG,EAAC;AAAL;AAAb,GAAvC,CAAlB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACG,SAAO,EAAP;AACF,CAnBD;;AAqBA,eAAe,eAAeQ,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAgC;AAC5C,MAAG;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaF,GAAnB;;AACA,YAAOE,MAAP;AACG,WAAK,MAAL;AACG,YAAG;AACA,cAAI;AAAEnB,YAAAA,EAAF;AAAMC,YAAAA,IAAN;AAAYC,YAAAA;AAAZ,cAAqBe,GAAG,CAACG,IAA7B;AACAF,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,MAAMvB,SAAS,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,CAApC;AACF,SAHD,CAGC,OAAMqB,CAAN,EAAQ;AACNL,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACE,YAAAA,KAAK,EAAE,IAAR;AAAcC,YAAAA,GAAG,EAAE;AAAnB,WAArB;AACF;;AACD;;AACH;AACGP,QAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBK,GAAhB,CAAqB,UAASP,MAAO,cAArC;AAVN;AAYF,GAdD,CAcC,OAAMQ,GAAN,EAAU;AACRT,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACM,MAAAA,UAAU,EAAE,GAAb;AAAkBH,MAAAA,GAAG,EAAEE,GAAG,CAACE;AAA3B,KAArB;AACF;AACH","sourcesContent":["const request = require('request');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst jwt = require('jsonwebtoken');\n\nconst shareLink = async(id, name, type)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'share')\n   let exist = await db.findOne({file_id: new ObjectID(id)},{ projection:{_id:1}})\n   client.close()\n   console.log(exist)\n   /*return new Promise((s,r)=>{\n      request.post({\n         url: \"https://api.dropboxapi.com/2/files/create_folder_v2\",\n         headers:{\"Content-Type\":\"application/json\",\"Authorization\":`Bearer ${dropboxToken}`},\n         json:{ path, autorename: false }\n      }, (err, res, body)=>{\n         if(err){\n            r(err)\n         }else{\n            s(body)\n         }\n      })\n   })*/\n   return {}\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method } = req;\n      switch(method){\n         case 'POST':\n            try{\n               let { id, name, type } = req.body\n               res.status(200).json(await shareLink(id, name, type))\n            }catch(e){\n               res.status(200).json({error: true, msg: 'Falha na criação'})\n            }\n            break;\n         default:\n            res.status(405).end(`Method ${method} Not Allowed`)\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}