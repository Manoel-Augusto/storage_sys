{"ast":null,"code":"const request = require('request');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst jwt = require('jsonwebtoken');\n\nconst getSharedFolderId = (token, path) => {\n  return new Promise((s, r) => {\n    request.post({\n      url: 'https://api.dropboxapi.com/2/sharing/share_folder',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      },\n      json: {\n        path,\n        acl_update_policy: \"editors\",\n        access_inheritance: \"inherit\"\n      }\n    }, (err, res, body) => {\n      if (err) return r(err);\n\n      if (body.error) {\n        if (body.error.bad_path) {\n          let {\n            shared_folder_id\n          } = body.error.bad_path;\n          return s({\n            shared_folder_id\n          });\n        }\n      }\n\n      let {\n        shared_folder_id\n      } = body;\n      s({\n        shared_folder_id\n      });\n    });\n  });\n};\n\nconst addCollaborator = async (user_id, id, path, email, type) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let {\n    dropboxToken\n  } = await db.findOne({\n    _id: new ObjectID(user_id)\n  }, {\n    projection: {\n      _id: 0,\n      dropboxToken: 1\n    }\n  });\n  client.close();\n\n  if (type == \"folder\") {\n    let {\n      shared_folder_id\n    } = await getSharedFolderId(dropboxToken, path);\n    console.log(shared_folder_id);\n    var params = {\n      shared_folder_id,\n      members: [{\n        member: {\n          \".tag\": \"email\",\n          email\n        },\n        access_level: \"editor\"\n      }]\n    };\n  } else {\n    var params = {\n      file: id,\n      members: [{\n        \".tag\": \"email\",\n        email\n      }],\n      access_level: \"viewer\"\n    };\n  }\n\n  console.log(params, `https://api.dropboxapi.com/2/sharing/add_${type}_member`);\n  return new Promise((s, r) => {\n    request.post({\n      url: `https://api.dropboxapi.com/2/sharing/add_${type}_member`,\n      headers: {\n        \"Authorization\": `Bearer ${dropboxToken}`\n      },\n      json: params\n    }, (err, res, body) => {\n      if (err) return r(err);\n      s(body);\n    });\n  });\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    if (tk) {\n      switch (method) {\n        case 'POST':\n          try {\n            let {\n              id: user_id\n            } = jwt.verify(tk, process.env.JWTSECRET);\n            let {\n              id,\n              path,\n              email,\n              type\n            } = req.body;\n            console.log(req.body);\n            let result = await addCollaborator(user_id, id, path, email, type);\n            console.log(result);\n            res.status(200).json({});\n          } catch (e) {\n            res.status(200).json({\n              error: true,\n              msg: 'Falha ao adicionar membro'\n            });\n          }\n\n          break;\n\n        default:\n          res.status(405).end(`Method ${method} Not Allowed`);\n      }\n    } else {\n      res.status(500).json({\n        statusCode: 500,\n        msg: \"Falha na autenticação\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/add-member.js"],"names":["request","require","ObjectID","loginMongo","jwt","getSharedFolderId","token","path","Promise","s","r","post","url","headers","json","acl_update_policy","access_inheritance","err","res","body","error","bad_path","shared_folder_id","addCollaborator","user_id","id","email","type","db","client","process","env","MONGODB","dropboxToken","findOne","_id","projection","close","console","log","params","members","member","access_level","file","handler","req","method","cookies","tk","verify","JWTSECRET","result","status","e","msg","end","statusCode","message"],"mappings":"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","sourcesContent":["const request = require('request');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst jwt = require('jsonwebtoken');\n\nconst getSharedFolderId = (token, path) => {\n   return new Promise((s, r) => {\n      request.post({\n         url: 'https://api.dropboxapi.com/2/sharing/share_folder',\n         headers: {\n            \"Authorization\": `Bearer ${token}`,\n         },\n         json: {path, acl_update_policy: \"editors\", access_inheritance: \"inherit\"}\n      }, (err, res, body) => {\n         if (err) return r(err)\n         if(body.error){\n            if(body.error.bad_path){\n               let { shared_folder_id } = body.error.bad_path\n               return s({shared_folder_id})\n            }\n         }\n         let { shared_folder_id } = body\n         s({shared_folder_id})\n      })\n   })\n\n}\n\nconst addCollaborator = async (user_id, id, path, email, type) => {\n   let { db, client } = await loginMongo(process.env.MONGODB, 'users')\n   let { dropboxToken } = await db.findOne({ _id: new ObjectID(user_id) }, { projection: { _id: 0, dropboxToken: 1 } })\n   client.close()\n   if (type == \"folder\") {\n      let { shared_folder_id } = await getSharedFolderId(dropboxToken, path)\n      console.log(shared_folder_id)\n      var params = {\n         shared_folder_id,\n         members: [{\n            member: {\n               \".tag\": \"email\",\n               email\n            },\n            access_level: \"editor\"\n         }],\n      }\n   } else {\n      var params = {\n         file: id,\n         members: [{\n            \".tag\": \"email\",\n            email\n         }],\n         access_level: \"viewer\",\n      }\n   }\n   console.log(params, `https://api.dropboxapi.com/2/sharing/add_${type}_member`)\n   return new Promise((s, r) => {\n      request.post({\n         url: `https://api.dropboxapi.com/2/sharing/add_${type}_member`,\n         headers: {\n            \"Authorization\": `Bearer ${dropboxToken}`,\n         },\n         json: params\n      }, (err, res, body) => {\n         if (err) return r(err)\n         s(body)\n      })\n   })\n}\n\nexport default async function handler(req, res) {\n   try {\n      const { method, cookies: { tk } } = req;\n      if (tk) {\n         switch (method) {\n            case 'POST':\n               try {\n                  let { id: user_id } = jwt.verify(tk, process.env.JWTSECRET);\n                  let { id, path, email, type } = req.body\n                  console.log(req.body)\n                  let result = await addCollaborator(user_id, id, path, email, type)\n                  console.log(result)\n                  res.status(200).json({})\n               } catch (e) {\n                  res.status(200).json({ error: true, msg: 'Falha ao adicionar membro' })\n               }\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      } else {\n         res.status(500).json({ statusCode: 500, msg: \"Falha na autenticação\" })\n      }\n   } catch (err) {\n      res.status(500).json({ statusCode: 500, msg: err.message })\n   }\n}\n"]},"metadata":{},"sourceType":"module"}