{"ast":null,"code":"const request = require('request');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst jwt = require('jsonwebtoken');\n\nconst formidable = require('formidable');\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst upload = async (_id, path, file) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let {\n    dropboxToken\n  } = await db.findOne({\n    _id: new ObjectID(_id)\n  }, {\n    projection: {\n      _id: 0,\n      dropboxToken: 1\n    }\n  });\n  client.close();\n  console.log(_id, path, file);\n  /*return new Promise((s,r)=>{\n     request.post({\n        uri: \"https://content.dropboxapi.com/2/files/upload\",\n        headers:{\n           \"Content-Type\": \"application/octet-stream\",\n           \"Authorization\":`Bearer ${dropboxToken}`,\n           \"Dropbox-API-Arg\": {path, mode: \"add\",autorename: true,mute: false,strict_conflict: false},\n        },\n        body: Buffer.from(file),\n     }, (err, res, body)=>{\n        if(err){\n           r(err)\n        }else{\n           s(body)\n        }\n     })\n  })*/\n};\n\nconst getFiles = req => {\n  const form = new formidable.IncomingForm();\n  return new Promise((s, r) => {\n    form.parse(req, (err, fields, files) => {\n      if (err) {\n        r(err);\n      } else {\n        s({\n          fields,\n          files\n        });\n      }\n    });\n  });\n};\n\nexport default async function handler(req, res) {\n  //try{\n  const {\n    method,\n    cookies: {\n      tk\n    }\n  } = req;\n\n  if (tk) {\n    switch (method) {\n      case 'POST':\n        //try{\n        let {\n          id\n        } = jwt.verify(tk, process.env.JWTSECRET);\n        let {\n          fields: {\n            path\n          },\n          files: {\n            file\n          }\n        } = await getFiles(req);\n        console.log(await upload(id, path, file));\n        res.status(200).json({\n          error: false\n        });\n        /*}catch(e){\n           res.status(200).json({error: true, msg: 'Falha na criação'})\n        }*/\n\n        break;\n\n      default:\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } else {\n    res.status(500).json({\n      statusCode: 500,\n      msg: \"Falha na autenticação\"\n    });\n  }\n  /*}catch(err){\n     res.status(500).json({statusCode: 500, msg: err.message})\n  }*/\n\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/upload.js"],"names":["request","require","ObjectID","loginMongo","jwt","formidable","config","api","bodyParser","upload","_id","path","file","db","client","process","env","MONGODB","dropboxToken","findOne","projection","close","console","log","getFiles","req","form","IncomingForm","Promise","s","r","parse","err","fields","files","handler","res","method","cookies","tk","id","verify","JWTSECRET","status","json","error","end","statusCode","msg"],"mappings":"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","sourcesContent":["const request = require('request');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst jwt = require('jsonwebtoken');\nconst formidable = require('formidable');\nexport const config = { api: { bodyParser: false }};\n\nconst upload = async(_id, path, file)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n   let {dropboxToken} = await db.findOne({_id: new ObjectID(_id)},{ projection:{_id:0,dropboxToken:1}})\n   client.close()\n   console.log(_id, path, file)\n   /*return new Promise((s,r)=>{\n      request.post({\n         uri: \"https://content.dropboxapi.com/2/files/upload\",\n         headers:{\n            \"Content-Type\": \"application/octet-stream\",\n            \"Authorization\":`Bearer ${dropboxToken}`,\n            \"Dropbox-API-Arg\": {path, mode: \"add\",autorename: true,mute: false,strict_conflict: false},\n         },\n         body: Buffer.from(file),\n      }, (err, res, body)=>{\n         if(err){\n            r(err)\n         }else{\n            s(body)\n         }\n      })\n   })*/\n}\n\nconst getFiles = (req)=>{\n   const form = new formidable.IncomingForm();\n   return new Promise((s,r)=>{\n      form.parse(req, (err, fields, files) => {\n         if(err){\n            r(err)\n         }else{\n            s({fields, files})\n         }\n      });\n   })\n}\n\nexport default async function handler(req, res){\n   //try{\n      const { method, cookies:{tk} } = req;\n      if(tk){\n         switch(method){\n            case 'POST':\n               //try{\n                  let { id } = jwt.verify(tk, process.env.JWTSECRET);\n                  let {fields:{path}, files:{file}} = await getFiles(req)\n                  console.log(await upload(id, path, file))\n                  res.status(200).json({error: false})\n               /*}catch(e){\n                  res.status(200).json({error: true, msg: 'Falha na criação'})\n               }*/\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      }else{\n         res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n      }\n   /*}catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }*/\n}\n"]},"metadata":{},"sourceType":"module"}