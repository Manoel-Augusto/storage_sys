{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/opt/js/storage_sys/contexts/models/data.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nconst ContextData = /*#__PURE__*/React.createContext();\n\nfunction ProviderData(props) {\n  const router = useRouter();\n  const {\n    slug\n  } = router.query;\n  const {\n    0: listRecords,\n    1: setListRecords\n  } = useState([]);\n  const {\n    0: checkAll,\n    1: setCheckAll\n  } = useState(false);\n  const {\n    0: dataShare,\n    1: setDataShare\n  } = useState(null);\n  const {\n    0: shared,\n    1: setShared\n  } = useState(false);\n  const elCheckAll = useCallback(el => {\n    if (el) {\n      if (checkAll === null) {\n        el.indeterminate = true;\n      } else {\n        el.indeterminate = false;\n      }\n    }\n  }, [checkAll]);\n\n  const toggleCheck = (ids = []) => {\n    ids = ids.length ? ids : listRecords.filter(item => checkAll === null ? Boolean(item.selected) : !checkAll != Boolean(item.selected)).map(item => item.id);\n    let newListRecords = listRecords.map(item => ids.includes(item.id) ? _objectSpread(_objectSpread({}, item), {}, {\n      selected: !item.selected\n    }) : item);\n    let selectedRecords = newListRecords.filter(item => item.selected);\n    setCheckAll(selectedRecords.length < newListRecords.length ? selectedRecords.length ? null : false : !checkAll);\n    setListRecords(newListRecords);\n  };\n\n  const getData = async () => {\n    let {\n      entries\n    } = await fetch(`/api/get-list-folder/${(slug || []).join('/')}`).then(res => res.json());\n\n    if (entries) {\n      setListRecords(entries);\n      setCheckAll(false);\n    }\n  };\n\n  const getDataShared = async () => {\n    let {\n      error,\n      folders,\n      files\n    } = await fetch('/api/get-list-shared').then(res => res.json());\n\n    if (!error) {\n      folders.entries = folders.entries.map(item => _objectSpread(_objectSpread({}, item), {}, {\n        \".tag\": \"folder\"\n      }));\n      files.entries = files.entries.map(item => _objectSpread(_objectSpread({}, item), {}, {\n        \".tag\": \"file\"\n      }));\n      console.log(folders.entries, files.entries);\n      setListRecords([...folders.entries, ...files.entries]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ContextData.Provider, {\n    value: {\n      listRecords,\n      setListRecords,\n      shared,\n      setShared,\n      checkAll,\n      setCheckAll,\n      dataShare,\n      setDataShare,\n      elCheckAll,\n      toggleCheck,\n      getData,\n      getDataShared\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this);\n}\n\nexport default ProviderData;\nexport { ContextData };","map":{"version":3,"sources":["/opt/js/storage_sys/contexts/models/data.js"],"names":["React","useState","useEffect","useCallback","useRouter","ContextData","createContext","ProviderData","props","router","slug","query","listRecords","setListRecords","checkAll","setCheckAll","dataShare","setDataShare","shared","setShared","elCheckAll","el","indeterminate","toggleCheck","ids","length","filter","item","Boolean","selected","map","id","newListRecords","includes","selectedRecords","getData","entries","fetch","join","then","res","json","getDataShared","error","folders","files","console","log","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useRouter } from 'next/router'\n\nconst ContextData = React.createContext()\n\nfunction ProviderData(props){\n   const router = useRouter()\n   const { slug } = router.query\n   const [listRecords, setListRecords] = useState([])\n   const [checkAll, setCheckAll] = useState(false)\n   const [dataShare, setDataShare] = useState(null)\n   const [shared, setShared] = useState(false)\n\n   const elCheckAll = useCallback(el => {\n      if(el){\n         if(checkAll === null){\n            el.indeterminate = true\n         }else{\n            el.indeterminate = false\n         }\n      }\n   }, [checkAll]);\n\n   const toggleCheck = (ids=[])=>{\n      ids = ids.length ? ids :\n         listRecords\n         .filter(item => checkAll === null ? Boolean(item.selected) : !checkAll != Boolean(item.selected))\n         .map(item => item.id)\n      let newListRecords = listRecords.map(item => ids.includes(item.id) ? {...item,selected:!item.selected} : item)\n      let selectedRecords = newListRecords.filter(item => item.selected)\n      setCheckAll(selectedRecords.length < newListRecords.length ? selectedRecords.length ? null : false : !checkAll)\n      setListRecords(newListRecords)\n   }\n\n   const getData = async()=>{\n      let { entries } = await fetch(`/api/get-list-folder/${(slug || []).join('/')}`)\n         .then(res => res.json())\n      if(entries){\n         setListRecords(entries)\n         setCheckAll(false)\n      }\n   }\n\n   const getDataShared = async()=>{\n      let { error, folders, files } = await fetch('/api/get-list-shared')\n         .then(res => res.json())\n      if(!error){\n         folders.entries = folders.entries.map(item => ({...item, \".tag\": \"folder\"}))\n         files.entries = files.entries.map(item => ({...item, \".tag\": \"file\"}))\n         console.log(folders.entries, files.entries)\n         setListRecords([...folders.entries, ...files.entries])\n      }\n   }\n\n   return(\n      <ContextData.Provider value={{\n         listRecords,\n         setListRecords,\n         shared,\n         setShared,\n         checkAll,\n         setCheckAll,\n         dataShare,\n         setDataShare,\n         elCheckAll,\n         toggleCheck,\n         getData,\n         getDataShared,\n      }}>\n         {props.children}\n      </ContextData.Provider>\n   )\n}\nexport default ProviderData\nexport { ContextData }\n"]},"metadata":{},"sourceType":"module"}