{"ast":null,"code":"const {\n  loginMongo\n} = require('../../models/mongo');\n\nconst {\n  IncomingForm\n} = require('formidable');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst jwt = require('jsonwebtoken');\n\nconst request = require('request');\n\nconst fs = require('fs');\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst getFormData = req => new Promise((s, r) => {\n  const form = new IncomingForm();\n  form.parse(req, (err, fields, files) => {\n    if (err) return r(err);\n    s({\n      fields,\n      file: fs.readFileSync(files.file.path)\n    });\n  });\n});\n\nconst upload = async (_id, path, file) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let {\n    dropboxToken\n  } = await db.findOne({\n    _id: new ObjectID(_id)\n  }, {\n    projection: {\n      _id: 0,\n      dropboxToken: 1\n    }\n  });\n  client.close();\n  return new Promise((s, r) => {\n    const args = JSON.stringify({\n      path,\n      mode: \"add\",\n      autorename: true,\n      mute: false,\n      strict_conflict: false\n    });\n    request.post({\n      url: \"https://content.dropboxapi.com/2/files/upload\",\n      headers: {\n        \"Content-Type\": \"application/octet-stream\",\n        \"Authorization\": `Bearer ${dropboxToken}`,\n        \"Dropbox-API-Arg\": args\n      },\n      body: file\n    }, (err, res, body) => {\n      if (err) return r(err);\n\n      try {\n        s(JSON.parse(body));\n      } catch (e) {\n        r(body);\n      }\n    });\n  });\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    if (tk) {\n      switch (method) {\n        case 'POST':\n          //try{\n          let {\n            id\n          } = jwt.verify(tk, process.env.JWTSECRET);\n          let {\n            fields: {\n              path\n            },\n            file\n          } = await getFormData(req);\n          let idUpload = await upload(id, path, file); //console.log(await upload(id, unescape(encodeURIComponent(path)), file))\n\n          console.log(idUpload);\n          res.status(200).json({\n            error: false\n          });\n          /*}catch(e){\n             res.status(200).json({error: true, msg: 'Falha na criação'})\n          }*/\n\n          break;\n\n        default:\n          res.status(405).end(`Method ${method} Not Allowed`);\n      }\n    } else {\n      res.status(500).json({\n        statusCode: 500,\n        msg: \"Falha na autenticação\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/upload.js"],"names":["loginMongo","require","IncomingForm","ObjectID","jwt","request","fs","config","api","bodyParser","getFormData","req","Promise","s","r","form","parse","err","fields","files","file","readFileSync","path","upload","_id","db","client","process","env","MONGODB","dropboxToken","findOne","projection","close","args","JSON","stringify","mode","autorename","mute","strict_conflict","post","url","headers","body","res","e","handler","method","cookies","tk","id","verify","JWTSECRET","idUpload","console","log","status","json","error","end","statusCode","msg","message"],"mappings":"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","sourcesContent":["const { loginMongo } = require('../../models/mongo');\nconst { IncomingForm } = require('formidable');\nconst { ObjectID } = require('mongodb');\nconst jwt = require('jsonwebtoken');\nconst request = require('request');\nconst fs = require('fs');\nexport const config = {api: {bodyParser: false}}\n\nconst getFormData = (req) => new Promise((s,r)=>{\n   const form = new IncomingForm();\n   form.parse(req, (err, fields, files) => {\n      if (err) return r(err)\n      s({fields, file: fs.readFileSync(files.file.path)})\n   });\n});\n\nconst upload = async(_id, path, file)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n   let {dropboxToken} = await db.findOne({_id: new ObjectID(_id)},{ projection:{_id:0,dropboxToken:1}})\n   client.close()\n   return new Promise((s,r)=>{\n      const args = JSON.stringify({path, mode: \"add\",autorename: true,mute: false,strict_conflict: false})\n      request.post({\n         url: \"https://content.dropboxapi.com/2/files/upload\",\n         headers:{\n            \"Content-Type\": \"application/octet-stream\",\n            \"Authorization\":`Bearer ${dropboxToken}`,\n            \"Dropbox-API-Arg\": args,\n         },\n         body: file,\n      }, (err, res, body)=>{\n         if(err) return r(err)\n         try{\n            s(JSON.parse(body)) \n         }catch(e){\n            r(body)\n         }\n      })\n   })\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method, cookies:{tk} } = req;\n      if(tk){\n         switch(method){\n            case 'POST':\n               //try{\n               let { id } = jwt.verify(tk, process.env.JWTSECRET);\n               let {fields:{path}, file} = await getFormData(req)\n               let idUpload = await upload(id, path, file)\n               //console.log(await upload(id, unescape(encodeURIComponent(path)), file))\n               console.log(idUpload)\n               res.status(200).json({error: false})\n               /*}catch(e){\n                  res.status(200).json({error: true, msg: 'Falha na criação'})\n               }*/\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      }else{\n         res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}