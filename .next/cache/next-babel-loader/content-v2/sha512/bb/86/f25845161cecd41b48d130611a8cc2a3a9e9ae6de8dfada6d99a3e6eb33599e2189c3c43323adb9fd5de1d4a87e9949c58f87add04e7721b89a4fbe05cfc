{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/opt/js/storage_sys/components/common/ButtonsUpload.js\";\nimport { useRef } from 'react';\nimport { useRouter } from 'next/router';\nimport { useData } from '../../contexts';\nexport default function ButtonsUpload() {\n  const router = useRouter();\n  const {\n    getData\n  } = useData();\n  const refFilesInput = useRef(null);\n\n  const handleFilesInput = (dir = false) => {\n    refFilesInput.current.removeAttribute(\"webkitdirectory\");\n    refFilesInput.current.removeAttribute(\"directory\");\n\n    if (dir) {\n      refFilesInput.current.setAttribute(\"webkitdirectory\", \"true\");\n      refFilesInput.current.setAttribute(\"directory\", \"true\");\n    }\n\n    refFilesInput.current.click();\n  };\n\n  const filesUpload = async files => {\n    let linkPath = router.asPath.split('/');\n    linkPath = linkPath.filter(item => item.length);\n    const folder = `${linkPath.length ? `/${linkPath.join('/')}` : ''}/`;\n\n    for (let file of [...files]) {\n      const form = new FormData();\n      form.append('file', file, file.name);\n      form.append('path', `${folder}${file.webkitRelativePath ? file.webkitRelativePath : file.name}`);\n      let {\n        error\n      } = await fetch('/api/upload', {\n        method: 'POST',\n        body: form\n      }).then(res => res.json());\n      console.log(error);\n    }\n\n    getData();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary dropdown-toggle\",\n        \"data-bs-toggle\": \"dropdown\",\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dropdown-menu\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"dropdown-item\",\n            onClick: () => handleFilesInput(),\n            children: \"Enviar Arquivos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"dropdown-item\",\n            onClick: () => handleFilesInput(true),\n            children: \"Enviar Pasta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: refFilesInput,\n      onChange: e => filesUpload(e.target.files),\n      value: \"\",\n      multiple: true,\n      hidden: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/opt/js/storage_sys/components/common/ButtonsUpload.js"],"names":["useRef","useRouter","useData","ButtonsUpload","router","getData","refFilesInput","handleFilesInput","dir","current","removeAttribute","setAttribute","click","filesUpload","files","linkPath","asPath","split","filter","item","length","folder","join","file","form","FormData","append","name","webkitRelativePath","error","fetch","method","body","then","res","json","console","log","e","target"],"mappings":"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","sourcesContent":["import { useRef } from 'react';\nimport { useRouter } from 'next/router';\nimport { useData } from '../../contexts';\n\nexport default function ButtonsUpload(){\n   const router = useRouter();\n   const { getData } = useData()\n   const refFilesInput = useRef(null);\n\n   const handleFilesInput= (dir=false) => {\n      refFilesInput.current.removeAttribute(\"webkitdirectory\");\n      refFilesInput.current.removeAttribute(\"directory\");\n      if(dir){\n         refFilesInput.current.setAttribute(\"webkitdirectory\", \"true\");\n         refFilesInput.current.setAttribute(\"directory\", \"true\");\n      }\n      refFilesInput.current.click()\n   }\n\n   const filesUpload = async(files)=>{\n      let linkPath = router.asPath.split('/');\n      linkPath = linkPath.filter(item => item.length)\n      const folder = `${linkPath.length ? `/${linkPath.join('/')}` : ''}/`\n      for(let file of [...files]){\n         const form = new FormData()\n         form.append('file', file, file.name)\n         form.append('path', `${folder}${file.webkitRelativePath ? file.webkitRelativePath : file.name}`)\n         let {error} = await fetch('/api/upload', {method:'POST', body:form}).then(res => res.json());\n         console.log(error)\n      }\n      getData()\n   }\n\n   return (<>\n      <div className=\"btn-group\">\n         <button className=\"btn btn-secondary dropdown-toggle\" data-bs-toggle=\"dropdown\">Enviar</button>\n         <ul className=\"dropdown-menu\">\n            <li>\n               <button className=\"dropdown-item\"\n                  onClick={() => handleFilesInput()}>\n                  Enviar Arquivos\n               </button>\n            </li>\n            <li>\n               <button className=\"dropdown-item\"\n                  onClick={() => handleFilesInput(true)}>\n                  Enviar Pasta\n               </button>\n            </li>\n         </ul>\n      </div>\n      <input type=\"file\" \n         ref={refFilesInput} \n         onChange={(e) => filesUpload(e.target.files)} \n         value=\"\" \n         multiple\n         hidden/>\n   </>)\n}\n"]},"metadata":{},"sourceType":"module"}