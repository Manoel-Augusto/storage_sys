{"ast":null,"code":"const request = require('request');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst jwt = require('jsonwebtoken');\n\nconst formidable = require('formidable');\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst upload = async (_id, path, file) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let {\n    dropboxToken\n  } = await db.findOne({\n    _id: new ObjectID(_id)\n  }, {\n    projection: {\n      _id: 0,\n      dropboxToken: 1\n    }\n  });\n  client.close();\n  return new Promise((s, r) => {\n    request.post({\n      url: \"https://content.dropboxapi.com/2/files/upload\",\n      headers: {\n        \"Content-Type\": \"application/octet-stream\",\n        \"Authorization\": `Bearer ${dropboxToken}`,\n        \"Dropbox-API-Arg\": {\n          path,\n          mode: \"add\",\n          autorename: true,\n          mute: false,\n          strict_conflict: false\n        }\n      },\n      body: file\n    }, (err, res, body) => {\n      if (err) {\n        r(err);\n      } else {\n        s(body);\n      }\n    });\n  });\n};\n\nexport default function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    if (tk) {\n      switch (method) {\n        case 'POST':\n          try {\n            let {\n              id\n            } = jwt.verify(tk, process.env.JWTSECRET);\n            const form = new formidable.IncomingForm();\n            form.parse(req, async (err, fields, files) => {\n              if (!err) {\n                await upload(id, fields.path, files);\n                res.status(200).json({\n                  error: false\n                });\n              } else {\n                res.status(200).json({\n                  error: true\n                });\n              }\n            });\n          } catch (e) {\n            res.status(200).json({\n              error: true,\n              msg: 'Falha na criação'\n            });\n          }\n\n          break;\n\n        default:\n          res.status(405).end(`Method ${method} Not Allowed`);\n      }\n    } else {\n      res.status(500).json({\n        statusCode: 500,\n        msg: \"Falha na autenticação\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/upload.js"],"names":["request","require","ObjectID","loginMongo","jwt","formidable","config","api","bodyParser","upload","_id","path","file","db","client","process","env","MONGODB","dropboxToken","findOne","projection","close","Promise","s","r","post","url","headers","mode","autorename","mute","strict_conflict","body","err","res","handler","req","method","cookies","tk","id","verify","JWTSECRET","form","IncomingForm","parse","fields","files","status","json","error","e","msg","end","statusCode","message"],"mappings":"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","sourcesContent":["const request = require('request');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst jwt = require('jsonwebtoken');\nconst formidable = require('formidable');\nexport const config = { api: { bodyParser: false }};\n\nconst upload = async(_id, path, file)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n   let {dropboxToken} = await db.findOne({_id: new ObjectID(_id)},{ projection:{_id:0,dropboxToken:1}})\n   client.close()\n   return new Promise((s,r)=>{\n      request.post({\n         url: \"https://content.dropboxapi.com/2/files/upload\",\n         headers:{\n            \"Content-Type\": \"application/octet-stream\",\n            \"Authorization\":`Bearer ${dropboxToken}`,\n            \"Dropbox-API-Arg\": {path, mode: \"add\",autorename: true,mute: false,strict_conflict: false},\n         },\n         body: file,\n      }, (err, res, body)=>{\n         if(err){\n            r(err)\n         }else{\n            s(body)\n         }\n      })\n   })\n}\n\nexport default function handler(req, res){\n   try{\n      const { method, cookies:{tk} } = req;\n      if(tk){\n         switch(method){\n            case 'POST':\n               try{\n                  let { id } = jwt.verify(tk, process.env.JWTSECRET);\n                  const form = new formidable.IncomingForm();\n                  form.parse(req, async(err, fields, files) => {\n                     if(!err){\n                        await upload(id, fields.path, files)\n                        res.status(200).json({error: false})\n                     }else{\n                        res.status(200).json({error: true})\n                     }\n                  });\n               }catch(e){\n                  res.status(200).json({error: true, msg: 'Falha na criação'})\n               }\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      }else{\n         res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}