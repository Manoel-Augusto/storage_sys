{"ast":null,"code":"const request = require('request');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst jwt = require('jsonwebtoken');\n\nconst {\n  IncomingForm\n} = require('formidable');\n\nconst {\n  promises: fs\n} = require('fs');\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst getFormData = req => {\n  const form = new IncomingForm();\n  return new Promise((s, r) => {\n    form.parse(req, (err, fields, files) => {\n      if (err) return r(err);\n      s({\n        fields,\n        file: fs.readFileSync(files.file.path)\n      });\n    });\n  });\n};\n\nexport default async function handler(req, res) {\n  //try{\n  const {\n    method,\n    cookies: {\n      tk\n    }\n  } = req;\n\n  if (tk) {\n    switch (method) {\n      case 'POST':\n        //try{\n        let {\n          id\n        } = jwt.verify(tk, process.env.JWTSECRET);\n        console.log(await getFormData(req));\n        res.status(200).json({\n          error: false\n        });\n        /*}catch(e){\n           res.status(200).json({error: true, msg: 'Falha na criação'})\n        }*/\n\n        break;\n\n      default:\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } else {\n    res.status(500).json({\n      statusCode: 500,\n      msg: \"Falha na autenticação\"\n    });\n  }\n  /*}catch(err){\n     res.status(500).json({statusCode: 500, msg: err.message})\n  }*/\n\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/upload.js"],"names":["request","require","ObjectID","loginMongo","jwt","IncomingForm","promises","fs","config","api","bodyParser","getFormData","req","form","Promise","s","r","parse","err","fields","files","file","readFileSync","path","handler","res","method","cookies","tk","id","verify","process","env","JWTSECRET","console","log","status","json","error","end","statusCode","msg"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAiBF,OAAO,CAAC,oBAAD,CAA9B;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAmBJ,OAAO,CAAC,YAAD,CAAhC;;AACA,MAAM;AAAEK,EAAAA,QAAQ,EAACC;AAAX,IAAkBN,OAAO,CAAC,IAAD,CAA/B;;AACA,OAAO,MAAMO,MAAM,GAAG;AAACC,EAAAA,GAAG,EAAE;AAACC,IAAAA,UAAU,EAAE;AAAb;AAAN,CAAf;;AACP,MAAMC,WAAW,GAAIC,GAAD,IAAS;AAC1B,QAAMC,IAAI,GAAG,IAAIR,YAAJ,EAAb;AACA,SAAO,IAAIS,OAAJ,CAAY,CAACC,CAAD,EAAGC,CAAH,KAAO;AACvBH,IAAAA,IAAI,CAACI,KAAL,CAAWL,GAAX,EAAgB,CAACM,GAAD,EAAMC,MAAN,EAAcC,KAAd,KAAwB;AACrC,UAAIF,GAAJ,EAAS,OAAOF,CAAC,CAACE,GAAD,CAAR;AACTH,MAAAA,CAAC,CAAC;AAACI,QAAAA,MAAD;AAASE,QAAAA,IAAI,EAAEd,EAAE,CAACe,YAAH,CAAgBF,KAAK,CAACC,IAAN,CAAWE,IAA3B;AAAf,OAAD,CAAD;AACF,KAHD;AAIF,GALM,CAAP;AAOF,CATD;;AAWA,eAAe,eAAeC,OAAf,CAAuBZ,GAAvB,EAA4Ba,GAA5B,EAAgC;AAC5C;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAO,EAAC;AAACC,MAAAA;AAAD;AAAlB,MAA2BhB,GAAjC;;AACA,MAAGgB,EAAH,EAAM;AACH,YAAOF,MAAP;AACG,WAAK,MAAL;AACG;AACA,YAAI;AAAEG,UAAAA;AAAF,YAASzB,GAAG,CAAC0B,MAAJ,CAAWF,EAAX,EAAeG,OAAO,CAACC,GAAR,CAAYC,SAA3B,CAAb;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAMxB,WAAW,CAACC,GAAD,CAA7B;AAEAa,QAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,KAAK,EAAE;AAAR,SAArB;AACA;AACZ;AACA;;AACY;;AACH;AACGb,QAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBG,GAAhB,CAAqB,UAASb,MAAO,cAArC;AAZN;AAcF,GAfD,MAeK;AACFD,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACG,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAE;AAAvB,KAArB;AACF;AACD;AACH;AACA;;AACC","sourcesContent":["const request = require('request');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst jwt = require('jsonwebtoken');\nconst { IncomingForm } = require('formidable');\nconst { promises:fs } = require('fs');\nexport const config = {api: {bodyParser: false}}\nconst getFormData = (req) => {\n   const form = new IncomingForm();\n   return new Promise((s,r)=>{\n      form.parse(req, (err, fields, files) => {\n         if (err) return r(err)\n         s({fields, file: fs.readFileSync(files.file.path)})\n      });\n   })\n\n}\n\nexport default async function handler(req, res){\n   //try{\n   const { method, cookies:{tk} } = req;\n   if(tk){\n      switch(method){\n         case 'POST':\n            //try{\n            let { id } = jwt.verify(tk, process.env.JWTSECRET);\n            console.log(await getFormData(req))\n\n            res.status(200).json({error: false})\n            /*}catch(e){\n               res.status(200).json({error: true, msg: 'Falha na criação'})\n            }*/\n            break;\n         default:\n            res.status(405).end(`Method ${method} Not Allowed`)\n      }\n   }else{\n      res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n   }\n   /*}catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }*/\n}\n"]},"metadata":{},"sourceType":"module"}