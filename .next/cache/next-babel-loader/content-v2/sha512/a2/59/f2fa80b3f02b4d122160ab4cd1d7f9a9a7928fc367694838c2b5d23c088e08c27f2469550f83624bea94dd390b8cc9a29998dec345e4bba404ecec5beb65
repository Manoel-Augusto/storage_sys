{"ast":null,"code":"const request = require('request');\n\nconst jwt = require('jsonwebtoken');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../../models/mongo');\n\nconst getListFolder = async (_id, path = \"\") => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let {\n    dropboxToken\n  } = await db.findOne({\n    _id: new ObjectID(_id)\n  }, {\n    projection: {\n      _id: 0,\n      password: 0\n    }\n  });\n  client.close();\n  return new Promise((s, r) => {\n    request.post({\n      url: \"https://api.dropboxapi.com/2/files/list_folder\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${dropboxToken}`\n      },\n      json: {\n        path\n      }\n    }, (err, res, body) => {\n      if (err) {\n        r(err);\n      } else {\n        s(body);\n      }\n    });\n  });\n};\n\nconst getShared = async data => {\n  return data;\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    if (tk) {\n      switch (method) {\n        case 'GET':\n          try {\n            let {\n              id\n            } = jwt.verify(tk, process.env.JWTSECRET);\n            let rt = await getListFolder(id);\n            console.log(await getShared(rt));\n            res.status(200).json(rt);\n          } catch (e) {\n            res.status(200).json([]);\n          }\n\n          break;\n\n        default:\n          res.status(405).end(`Method ${method} Not Allowed`);\n      }\n    } else {\n      res.status(500).json({\n        statusCode: 500,\n        msg: \"Falha na autenticação\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/get-list-folder/index.js"],"names":["request","require","jwt","ObjectID","loginMongo","getListFolder","_id","path","db","client","process","env","MONGODB","dropboxToken","findOne","projection","password","close","Promise","s","r","post","url","headers","json","err","res","body","getShared","data","handler","req","method","cookies","tk","id","verify","JWTSECRET","rt","console","log","status","e","end","statusCode","msg","message"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAeF,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAiBH,OAAO,CAAC,uBAAD,CAA9B;;AAEA,MAAMI,aAAa,GAAG,OAAMC,GAAN,EAAWC,IAAI,GAAC,EAAhB,KAAqB;AACxC,MAAI;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,MAAe,MAAML,UAAU,CAACM,OAAO,CAACC,GAAR,CAAYC,OAAb,EAAsB,OAAtB,CAAnC;AACA,MAAI;AAACC,IAAAA;AAAD,MAAiB,MAAML,EAAE,CAACM,OAAH,CAAW;AAACR,IAAAA,GAAG,EAAE,IAAIH,QAAJ,CAAaG,GAAb;AAAN,GAAX,EAAoC;AAAES,IAAAA,UAAU,EAAC;AAACT,MAAAA,GAAG,EAAC,CAAL;AAAOU,MAAAA,QAAQ,EAAC;AAAhB;AAAb,GAApC,CAA3B;AACAP,EAAAA,MAAM,CAACQ,KAAP;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,CAAD,EAAGC,CAAH,KAAO;AACvBpB,IAAAA,OAAO,CAACqB,IAAR,CAAa;AACVC,MAAAA,GAAG,EAAE,gDADK;AAEVC,MAAAA,OAAO,EAAC;AAAC,wBAAe,kBAAhB;AAAmC,yBAAiB,UAASV,YAAa;AAA1E,OAFE;AAGVW,MAAAA,IAAI,EAAC;AAAEjB,QAAAA;AAAF;AAHK,KAAb,EAIG,CAACkB,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAkB;AAClB,UAAGF,GAAH,EAAO;AACJL,QAAAA,CAAC,CAACK,GAAD,CAAD;AACF,OAFD,MAEK;AACFN,QAAAA,CAAC,CAACQ,IAAD,CAAD;AACF;AACH,KAVD;AAWF,GAZM,CAAP;AAaF,CAjBD;;AAmBA,MAAMC,SAAS,GAAG,MAAMC,IAAN,IAAe;AAC9B,SAAOA,IAAP;AACF,CAFD;;AAIA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BL,GAA5B,EAAgC;AAC5C,MAAG;AACA,UAAM;AAAEM,MAAAA,MAAF;AAAUC,MAAAA,OAAO,EAAC;AAACC,QAAAA;AAAD;AAAlB,QAA0BH,GAAhC;;AACA,QAAGG,EAAH,EAAM;AACH,cAAOF,MAAP;AACG,aAAK,KAAL;AACG,cAAG;AACA,gBAAI;AAAEG,cAAAA;AAAF,gBAASjC,GAAG,CAACkC,MAAJ,CAAWF,EAAX,EAAexB,OAAO,CAACC,GAAR,CAAY0B,SAA3B,CAAb;AACA,gBAAIC,EAAE,GAAG,MAAMjC,aAAa,CAAC8B,EAAD,CAA5B;AACAI,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAMZ,SAAS,CAACU,EAAD,CAA3B;AACAZ,YAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqBc,EAArB;AACF,WALD,CAKC,OAAMI,CAAN,EAAQ;AACNhB,YAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqB,EAArB;AACF;;AACD;;AACH;AACGE,UAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBE,GAAhB,CAAqB,UAASX,MAAO,cAArC;AAZN;AAcF,KAfD,MAeK;AACFN,MAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqB;AAACoB,QAAAA,UAAU,EAAE,GAAb;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAArB;AACF;AACH,GApBD,CAoBC,OAAMpB,GAAN,EAAU;AACRC,IAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqB;AAACoB,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAEpB,GAAG,CAACqB;AAA3B,KAArB;AACF;AACH","sourcesContent":["const request = require('request');\nconst jwt = require('jsonwebtoken');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../../models/mongo');\n\nconst getListFolder = async(_id, path=\"\")=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n   let {dropboxToken} = await db.findOne({_id: new ObjectID(_id)},{ projection:{_id:0,password:0}})\n   client.close()\n   return new Promise((s,r)=>{\n      request.post({\n         url: \"https://api.dropboxapi.com/2/files/list_folder\",\n         headers:{\"Content-Type\":\"application/json\",\"Authorization\":`Bearer ${dropboxToken}`},\n         json:{ path }\n      }, (err, res, body)=>{\n         if(err){\n            r(err)\n         }else{\n            s(body)\n         }\n      })\n   })\n}\n\nconst getShared = async(data) => {\n   return data\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method, cookies:{tk}} = req;\n      if(tk){\n         switch(method){\n            case 'GET':\n               try{\n                  let { id } = jwt.verify(tk, process.env.JWTSECRET);\n                  let rt = await getListFolder(id)\n                  console.log(await getShared(rt))\n                  res.status(200).json(rt)\n               }catch(e){\n                  res.status(200).json([])\n               }\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      }else{\n         res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}