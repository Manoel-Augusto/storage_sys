{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst request = require('request');\n\nconst jwt = require('jsonwebtoken');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst getList = async (_id, type) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let {\n    dropboxToken\n  } = await db.findOne({\n    _id: new ObjectID(_id)\n  }, {\n    projection: {\n      _id: 0,\n      password: 0\n    }\n  });\n  client.close();\n  return new Promise((s, r) => {\n    request.post({\n      url: `https://api.dropboxapi.com/2/sharing/${type == \"folders\" ? \"list_folders\" : \"list_received_files\"}`,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${dropboxToken}`\n      },\n      json: {\n        limit: 100,\n        actions: []\n      }\n    }, (err, res, body) => {\n      if (err) {\n        r(err);\n      } else {\n        s(body);\n      }\n    });\n  });\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    if (tk) {\n      switch (method) {\n        case 'GET':\n          try {\n            let {\n              id\n            } = jwt.verify(tk, process.env.JWTSECRET);\n            let folders = await getList(id, \"folders\");\n\n            if (!folders.error) {\n              folders.entries = folders.entries.map(item => _objectSpread(_objectSpread({}, item), {}, {\n                \".tag\": \"folder\"\n              }));\n            }\n\n            let files = await getList(id, \"files\");\n\n            if (!files.error) {\n              files.entries = files.entries.map(item => _objectSpread(_objectSpread({}, item), {}, {\n                \".tag\": \"folder\"\n              }));\n            }\n\n            res.status(200).json({\n              folders,\n              files\n            });\n          } catch (e) {\n            res.status(200).json([]);\n          }\n\n          break;\n\n        default:\n          res.status(405).end(`Method ${method} Not Allowed`);\n      }\n    } else {\n      res.status(500).json({\n        error: true,\n        statusCode: 500,\n        msg: \"Falha na autenticação\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/get-list-shared.js"],"names":["request","require","jwt","ObjectID","loginMongo","getList","_id","type","db","client","process","env","MONGODB","dropboxToken","findOne","projection","password","close","Promise","s","r","post","url","headers","json","limit","actions","err","res","body","handler","req","method","cookies","tk","id","verify","JWTSECRET","folders","error","entries","map","item","files","status","e","end","statusCode","msg","message"],"mappings":"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","sourcesContent":["const request = require('request');\nconst jwt = require('jsonwebtoken');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\n\nconst getList = async(_id, type)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n   let {dropboxToken} = await db.findOne({_id: new ObjectID(_id)},{ projection:{_id:0,password:0}})\n   client.close()\n   return new Promise((s,r)=>{\n      request.post({\n         url: `https://api.dropboxapi.com/2/sharing/${type == \"folders\" ? \"list_folders\" : \"list_received_files\"}`,\n         headers:{\"Content-Type\":\"application/json\",\"Authorization\":`Bearer ${dropboxToken}`},\n         json:{ limit: 100, actions: [] }\n      }, (err, res, body)=>{\n         if(err){\n            r(err)\n         }else{\n            s(body)\n         }\n      })\n   })\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method, cookies:{tk}} = req;\n      if(tk){\n         switch(method){\n            case 'GET':\n               try{\n                  let { id } = jwt.verify(tk, process.env.JWTSECRET);\n                  let folders = await getList(id, \"folders\")\n                  if(!folders.error){\n                     folders.entries = folders.entries.map(item => ({...item, \".tag\": \"folder\"}))\n                  }\n                  let files = await getList(id, \"files\")\n                  if(!files.error){\n                     files.entries = files.entries.map(item => ({...item, \".tag\": \"folder\"}))\n                  }\n                  res.status(200).json({folders, files})\n               }catch(e){\n                  res.status(200).json([])\n               }\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      }else{\n         res.status(500).json({error: true, statusCode: 500, msg: \"Falha na autenticação\"})\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}