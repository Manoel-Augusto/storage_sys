{"ast":null,"code":"const bcrypt = require('bcrypt');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst register = async (name, email, password, dropboxToken) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let emailExist = await db.findOne({\n    email\n  }, {\n    projection: {\n      id: 1\n    }\n  });\n\n  if (!emailExist) {\n    try {\n      const hash = bcrypt.hashSync(password, 10);\n      await db.insert({\n        name,\n        email,\n        password: hash,\n        dropboxToken\n      });\n      client.close();\n      return true;\n    } catch (e) {}\n  }\n\n  client.close();\n  return false;\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method\n    } = req;\n\n    if (method === 'POST') {\n      let {\n        name,\n        email,\n        password,\n        dropboxToken\n      } = req.body;\n      res.status(200).json(await register(name, email, password, dropboxToken));\n    } else {\n      res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/register.js"],"names":["bcrypt","require","loginMongo","register","name","email","password","dropboxToken","db","client","process","env","MONGODB","emailExist","findOne","projection","id","hash","hashSync","insert","close","e","handler","req","res","method","body","status","json","end","err","statusCode","msg","message"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAiBD,OAAO,CAAC,oBAAD,CAA9B;;AAEA,MAAME,QAAQ,GAAG,OAAMC,IAAN,EAAYC,KAAZ,EAAmBC,QAAnB,EAA6BC,YAA7B,KAA4C;AAC1D,MAAI;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,MAAe,MAAMP,UAAU,CAACQ,OAAO,CAACC,GAAR,CAAYC,OAAb,EAAsB,OAAtB,CAAnC;AACA,MAAIC,UAAU,GAAG,MAAML,EAAE,CAACM,OAAH,CAAW;AAACT,IAAAA;AAAD,GAAX,EAAmB;AAAEU,IAAAA,UAAU,EAAC;AAACC,MAAAA,EAAE,EAAC;AAAJ;AAAb,GAAnB,CAAvB;;AACA,MAAG,CAACH,UAAJ,EAAe;AACZ,QAAG;AACA,YAAMI,IAAI,GAAGjB,MAAM,CAACkB,QAAP,CAAgBZ,QAAhB,EAA0B,EAA1B,CAAb;AACA,YAAME,EAAE,CAACW,MAAH,CAAU;AAACf,QAAAA,IAAD;AAAOC,QAAAA,KAAP;AAAcC,QAAAA,QAAQ,EAAEW,IAAxB;AAA8BV,QAAAA;AAA9B,OAAV,CAAN;AACAE,MAAAA,MAAM,CAACW,KAAP;AACA,aAAO,IAAP;AACF,KALD,CAKC,OAAMC,CAAN,EAAQ,CAAE;AACb;;AACDZ,EAAAA,MAAM,CAACW,KAAP;AACA,SAAO,KAAP;AACF,CAbD;;AAeA,eAAe,eAAeE,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAgC;AAC5C,MAAG;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaF,GAAnB;;AACA,QAAGE,MAAM,KAAK,MAAd,EAAqB;AAClB,UAAI;AAAErB,QAAAA,IAAF;AAAQC,QAAAA,KAAR;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAA0CgB,GAAG,CAACG,IAAlD;AACAF,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,MAAMzB,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwBC,YAAxB,CAAnC;AACF,KAHD,MAGK;AACFiB,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBE,GAAhB,CAAqB,UAASJ,MAAO,cAArC;AACF;AACH,GARD,CAQC,OAAMK,GAAN,EAAU;AACRN,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACG,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAEF,GAAG,CAACG;AAA3B,KAArB;AACF;AACH","sourcesContent":["const bcrypt = require('bcrypt');\nconst { loginMongo } = require('../../models/mongo');\n\nconst register = async(name, email, password, dropboxToken)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n   let emailExist = await db.findOne({email},{ projection:{id:1}})\n   if(!emailExist){\n      try{\n         const hash = bcrypt.hashSync(password, 10);\n         await db.insert({name, email, password: hash, dropboxToken})\n         client.close()\n         return true\n      }catch(e){}\n   }\n   client.close()\n   return false\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method } = req;\n      if(method === 'POST'){\n         let { name, email, password, dropboxToken } = req.body\n         res.status(200).json(await register(name, email, password, dropboxToken))\n      }else{\n         res.status(405).end(`Method ${method} Not Allowed`)\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n}\n"]},"metadata":{},"sourceType":"module"}