{"ast":null,"code":"const request = require('request');\n\nconst {\n  ObjectID\n} = require('mongodb');\n\nconst {\n  loginMongo\n} = require('../../models/mongo');\n\nconst jwt = require('jsonwebtoken');\n\nconst formidable = require('formidable');\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst upload = async (_id, path) => {\n  let {\n    db,\n    client\n  } = await loginMongo(process.env.MONGODB, 'users');\n  let {\n    dropboxToken\n  } = await db.findOne({\n    _id: new ObjectID(_id)\n  }, {\n    projection: {\n      _id: 0,\n      dropboxToken: 1\n    }\n  });\n  client.close();\n  /*return new Promise((s,r)=>{\n     request.post({\n        url: \"https://content.dropboxapi.com/2/files/upload\",\n        headers:{\n           \"Content-Type\": \"application/octet-stream\",\n           \"Authorization\":`Bearer ${dropboxToken}`,\n           \"Dropbox-API-Arg\": {path: \"\"},\n        },\n     }, (err, res, body)=>{\n        if(err){\n           r(err)\n        }else{\n           s(body)\n        }\n     })\n  })*/\n};\n\nexport default async function handler(req, res) {\n  try {\n    const {\n      method,\n      cookies: {\n        tk\n      }\n    } = req;\n\n    if (tk) {\n      switch (method) {\n        case 'POST':\n          try {\n            let {\n              id\n            } = jwt.verify(tk, process.env.JWTSECRET);\n            console.log(req);\n            const form = new formidable.IncomingForm();\n            form.parse(req, (err, fields, files) => {\n              console.log(\"rr: \", err, fields, files);\n            });\n            res.status(200).json({});\n          } catch (e) {\n            res.status(200).json({\n              error: true,\n              msg: 'Falha na criação'\n            });\n          }\n\n          break;\n\n        default:\n          res.status(405).end(`Method ${method} Not Allowed`);\n      }\n    } else {\n      res.status(500).json({\n        statusCode: 500,\n        msg: \"Falha na autenticação\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      statusCode: 500,\n      msg: err.message\n    });\n  }\n\n  res.end();\n}","map":{"version":3,"sources":["/opt/js/storage_sys/pages/api/upload.js"],"names":["request","require","ObjectID","loginMongo","jwt","formidable","config","api","bodyParser","upload","_id","path","db","client","process","env","MONGODB","dropboxToken","findOne","projection","close","handler","req","res","method","cookies","tk","id","verify","JWTSECRET","console","log","form","IncomingForm","parse","err","fields","files","status","json","e","error","msg","end","statusCode","message"],"mappings":"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","sourcesContent":["const request = require('request');\nconst { ObjectID } = require('mongodb');\nconst { loginMongo } = require('../../models/mongo');\nconst jwt = require('jsonwebtoken');\nconst formidable = require('formidable');\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n\nconst upload = async(_id, path)=>{\n   let {db, client} = await loginMongo(process.env.MONGODB, 'users')\n   let {dropboxToken} = await db.findOne({_id: new ObjectID(_id)},{ projection:{_id:0,dropboxToken:1}})\n   client.close()\n   /*return new Promise((s,r)=>{\n      request.post({\n         url: \"https://content.dropboxapi.com/2/files/upload\",\n         headers:{\n            \"Content-Type\": \"application/octet-stream\",\n            \"Authorization\":`Bearer ${dropboxToken}`,\n            \"Dropbox-API-Arg\": {path: \"\"},\n         },\n      }, (err, res, body)=>{\n         if(err){\n            r(err)\n         }else{\n            s(body)\n         }\n      })\n   })*/\n}\n\nexport default async function handler(req, res){\n   try{\n      const { method, cookies:{tk} } = req;\n      if(tk){\n         switch(method){\n            case 'POST':\n               try{\n                  let { id } = jwt.verify(tk, process.env.JWTSECRET);\n                  console.log(req)\n                  const form = new formidable.IncomingForm();\n                  form.parse(req, (err, fields, files) => {\n                     console.log(\"rr: \", err, fields, files);\n                  });\n                  res.status(200).json({})\n               }catch(e){\n                  res.status(200).json({error: true, msg: 'Falha na criação'})\n               }\n               break;\n            default:\n               res.status(405).end(`Method ${method} Not Allowed`)\n         }\n      }else{\n         res.status(500).json({statusCode: 500, msg: \"Falha na autenticação\"})\n      }\n   }catch(err){\n      res.status(500).json({statusCode: 500, msg: err.message})\n   }\n   res.end()\n}\n"]},"metadata":{},"sourceType":"module"}